{"ast":null,"code":"var _jsxFileName = \"D:\\\\CODE\\\\covalen-app\\\\src\\\\components\\\\DashboardMaison.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { DndContext, closestCenter, KeyboardSensor, PointerSensor, useSensor, useSensors } from '@dnd-kit/core';\nimport { arrayMove, SortableContext, sortableKeyboardCoordinates, verticalListSortingStrategy, useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\n\n// Composant Task draggable avec dnd-kit\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SortableTaskItem = ({\n  task,\n  onTaskClick\n}) => {\n  _s();\n  var _task$fields, _task$fields$find;\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging\n  } = useSortable({\n    id: task.id\n  });\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.6 : 1\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: setNodeRef,\n    style: style,\n    className: `task-item clickable compact grid-task ${isDragging ? 'dragging' : ''}`,\n    onClick: () => onTaskClick(task),\n    title: \"Glissez pour r\\xE9organiser\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-content-compact\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"drag-handle enhanced-handle compact-handle\",\n        title: \"R\\xE9organiser\",\n        ...attributes,\n        ...listeners,\n        children: \"\\u22EE\\u22EE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"task-number\",\n          children: (_task$fields = task.fields) === null || _task$fields === void 0 ? void 0 : (_task$fields$find = _task$fields.find(f => f.key === 'modelNumber')) === null || _task$fields$find === void 0 ? void 0 : _task$fields$find.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"task-name-compact\",\n          children: task.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n\n// Composant Task simple (sans drag & drop pour comparaison)\n_s(SortableTaskItem, \"bHcBvfvWWXIh6rUHlnQDLt/lZWI=\", false, function () {\n  return [useSortable];\n});\n_c = SortableTaskItem;\nconst TaskItem = ({\n  task,\n  onTaskClick\n}) => {\n  var _task$fields2, _task$fields2$find;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-item clickable compact grid-task\",\n    onClick: () => onTaskClick(task),\n    title: \"Cliquez pour voir les d\\xE9tails\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-content-compact\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"task-number\",\n          children: (_task$fields2 = task.fields) === null || _task$fields2 === void 0 ? void 0 : (_task$fields2$find = _task$fields2.find(f => f.key === 'modelNumber')) === null || _task$fields2$find === void 0 ? void 0 : _task$fields2$find.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"task-name-compact\",\n          children: task.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n\n// Composant de grille libre pour une catégorie\n_c2 = TaskItem;\nconst CategoryFreeGrid = ({\n  category,\n  tasks,\n  isOpen,\n  isAdminMode,\n  onToggleCategory,\n  onTaskClick,\n  onReorderTasks,\n  searchTerm,\n  gridColumns: _gridColumns = 1 // on capture la prop mais on ne l'utilise pas\n}) => {\n  _s2();\n  const gridColumns = 1; // on force la valeur ici\n  // Filtrer les tâches localement\n  const filteredTasks = useMemo(() => {\n    if (!searchTerm) return tasks;\n    const searchLower = searchTerm.toLowerCase();\n    return tasks.filter(task => {\n      var _task$fields3, _task$fields3$find;\n      const modelNumber = ((_task$fields3 = task.fields) === null || _task$fields3 === void 0 ? void 0 : (_task$fields3$find = _task$fields3.find(f => f.key === 'modelNumber')) === null || _task$fields3$find === void 0 ? void 0 : _task$fields3$find.value) || '';\n      return task.name.toLowerCase().includes(searchLower) || modelNumber.toLowerCase().includes(searchLower) || category.toLowerCase().includes(searchLower);\n    });\n  }, [tasks, searchTerm, category]);\n\n  // Configuration des sensors pour dnd-kit\n  const sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor, {\n    coordinateGetter: sortableKeyboardCoordinates\n  }));\n\n  // Gestion du drag end\n  const handleDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    if (active.id !== (over === null || over === void 0 ? void 0 : over.id)) {\n      const oldIndex = filteredTasks.findIndex(task => task.id === active.id);\n      const newIndex = filteredTasks.findIndex(task => task.id === over.id);\n      if (oldIndex !== -1 && newIndex !== -1) {\n        const reorderedTasks = arrayMove(filteredTasks, oldIndex, newIndex);\n        onReorderTasks(category, reorderedTasks);\n      }\n    }\n  };\n\n  // Créer une grille simple\n  const createGrid = useMemo(() => {\n    // Calculer le nombre de lignes nécessaires\n    const taskCount = filteredTasks.length;\n    const rows = Math.ceil(taskCount / gridColumns);\n    const totalCells = rows * gridColumns;\n\n    // Créer un array pour la grille\n    const grid = Array(totalCells).fill(null);\n\n    // Placer les tâches dans la grille séquentiellement\n    filteredTasks.forEach((task, index) => {\n      if (index < totalCells) {\n        grid[index] = task;\n      }\n    });\n    return {\n      grid,\n      rows,\n      totalCells\n    };\n  }, [filteredTasks, gridColumns]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"category-section\",\n    style: {\n      height: 'fit-content'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `category-header ${isAdminMode ? 'admin-mode' : ''}`,\n      onClick: e => onToggleCategory(category, e),\n      onKeyDown: e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          onToggleCategory(category, e);\n        }\n      },\n      role: \"button\",\n      tabIndex: 0,\n      \"aria-expanded\": isOpen,\n      \"aria-label\": `Toggle ${category} category`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"category-left\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"category-toggle\",\n          children: isOpen ? '▼' : '▶'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"category-name\",\n          children: category\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this), isAdminMode && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"task-count\",\n          children: [\"(\", filteredTasks.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"category-goto\",\n        children: \"\\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(DndContext, {\n      sensors: sensors,\n      collisionDetection: closestCenter,\n      onDragEnd: handleDragEnd,\n      children: /*#__PURE__*/_jsxDEV(SortableContext, {\n        items: filteredTasks.map(task => task.id),\n        strategy: verticalListSortingStrategy,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tasks-free-grid\",\n          style: {\n            display: 'grid',\n            gridTemplateColumns: `repeat(${gridColumns}, 1fr)`,\n            gap: '8px',\n            padding: '16px'\n          },\n          children: createGrid.grid.map((task, gridPosition) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid-cell\",\n            children: task ? /*#__PURE__*/_jsxDEV(SortableTaskItem, {\n              task: task,\n              onTaskClick: onTaskClick\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"empty-grid-cell\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 41\n            }, this)\n          }, `grid-cell-${gridPosition}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 9\n  }, this);\n};\n_s2(CategoryFreeGrid, \"1N7k+PK64E8FmJQ8gW4g/mt/VCU=\", false, function () {\n  return [useSensors, useSensor, useSensor];\n});\n_c3 = CategoryFreeGrid;\nconst DashboardMaison = ({\n  appData,\n  onTabChange,\n  onTaskSelect,\n  onAdminPanel,\n  isAdminMode,\n  onReorderTasksInCategory\n}) => {\n  _s3();\n  const [categoryStates, setCategoryStates] = useState({});\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Données organisées par catégorie\n  const categoriesData = useMemo(() => {\n    const categories = new Map();\n    Object.keys(appData).forEach(tabName => {\n      if (tabName !== 'Maison' && tabName !== 'Admin') {\n        const tasks = appData[tabName] || [];\n        tasks.forEach(task => {\n          const categoryName = task.category || 'Autres';\n          if (!categories.has(categoryName)) {\n            categories.set(categoryName, {\n              name: categoryName,\n              tasks: []\n            });\n          }\n          categories.get(categoryName).tasks.push({\n            ...task,\n            tabName\n          });\n        });\n      }\n    });\n    return Array.from(categories.values()).sort((a, b) => a.name.localeCompare(b.name));\n  }, [appData]);\n  DashboardMaison.propTypes = {\n    appData: PropTypes.object.isRequired,\n    onTabChange: PropTypes.func.isRequired,\n    onTaskSelect: PropTypes.func.isRequired,\n    onAdminPanel: PropTypes.func.isRequired,\n    isAdminMode: PropTypes.bool.isRequired,\n    onReorderTasksInCategory: PropTypes.func.isRequired\n  };\n  SortableTaskItem.propTypes = {\n    task: PropTypes.object.isRequired,\n    onTaskClick: PropTypes.func.isRequired\n  };\n  TaskItem.propTypes = {\n    task: PropTypes.object.isRequired,\n    onTaskClick: PropTypes.func.isRequired\n  };\n  CategoryFreeGrid.propTypes = {\n    category: PropTypes.string.isRequired,\n    tasks: PropTypes.array.isRequired,\n    isOpen: PropTypes.bool.isRequired,\n    isAdminMode: PropTypes.bool.isRequired,\n    onToggleCategory: PropTypes.func.isRequired,\n    onTaskClick: PropTypes.func.isRequired,\n    onReorderTasks: PropTypes.func.isRequired,\n    searchTerm: PropTypes.string,\n    gridColumns: PropTypes.number\n  };\n  // Filtrage des catégories\n  const filteredCategories = useMemo(() => {\n    if (!searchTerm) return categoriesData;\n    const searchLower = searchTerm.toLowerCase();\n    return categoriesData.filter(category => {\n      const categoryMatches = category.name.toLowerCase().includes(searchLower);\n      const hasMatchingTasks = category.tasks.some(task => {\n        var _task$fields4, _task$fields4$find;\n        const modelNumber = ((_task$fields4 = task.fields) === null || _task$fields4 === void 0 ? void 0 : (_task$fields4$find = _task$fields4.find(f => f.key === 'modelNumber')) === null || _task$fields4$find === void 0 ? void 0 : _task$fields4$find.value) || '';\n        return task.name.toLowerCase().includes(searchLower) || modelNumber.toLowerCase().includes(searchLower);\n      });\n      return categoryMatches || hasMatchingTasks;\n    });\n  }, [categoriesData, searchTerm]);\n  const handleToggleCategory = (categoryName, event) => {\n    event.stopPropagation();\n    setCategoryStates(prev => ({\n      ...prev,\n      [categoryName]: !prev[categoryName]\n    }));\n  };\n  const handleTaskClick = task => {\n    onTabChange(task.tabName);\n    onTaskSelect(task);\n  };\n  const handleReorderTasks = (categoryName, reorderedTasks) => {\n    if (onReorderTasksInCategory) {\n      var _categoriesData$find;\n      // Trouver les indices des tâches dans le tableau d'origine\n      const originalTasks = ((_categoriesData$find = categoriesData.find(cat => cat.name === categoryName)) === null || _categoriesData$find === void 0 ? void 0 : _categoriesData$find.tasks) || [];\n      const sourceIndex = originalTasks.findIndex(task => task.id === reorderedTasks[0].id);\n      const targetIndex = reorderedTasks.findIndex(task => task.id === originalTasks[sourceIndex].id);\n      onReorderTasksInCategory(categoryName, sourceIndex, targetIndex);\n    }\n  };\n  const getTotalTaskCount = () => {\n    return filteredCategories.reduce((total, category) => total + category.tasks.length, 0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"dashboard-title\",\n        children: \"Covalen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"welcome-message\",\n      children: \"Bienvenue sur votre tableau de bord centralis\\xE9.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 13\n    }, this), isAdminMode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"admin-dashboard-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-banner\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"admin-banner-text\",\n          children: \"Mode Admin Actif sur le Dashboard.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"admin-manage-btn\",\n          onClick: onAdminPanel,\n          children: \"G\\xE9rer les Onglets\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overview-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"overview-title\",\n        children: \"Vue d'overview des T\\xE2ches\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-bar\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"search-icon\",\n            children: \"\\uD83D\\uDD0D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Rechercher une t\\xE2che, cat\\xE9gorie ou num\\xE9ro...\",\n            value: searchTerm,\n            onChange: e => setSearchTerm(e.target.value),\n            className: \"search-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 25\n          }, this), searchTerm && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"search-clear\",\n            onClick: () => setSearchTerm(''),\n            title: \"Effacer la recherche\",\n            children: \"\\u2715\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-hints\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"search-hint\",\n            children: \"\\uD83D\\uDCA1 Affichage en grille simple\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 21\n        }, this), searchTerm && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-results-info\",\n          children: filteredCategories.length === 0 ? `Aucun résultat pour \"${searchTerm}\"` : `${getTotalTaskCount()} tâche(s) trouvée(s) dans ${filteredCategories.length} catégorie(s)`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"categories-container\",\n        style: {\n          display: 'grid',\n          gridTemplateColumns: 'repeat(4, 1fr)',\n          gap: '16px',\n          width: '100%',\n          gridAutoFlow: 'column',\n          // Changez ceci pour une disposition en colonne\n          gridTemplateRows: 'auto',\n          // Permettre aux lignes de s'adapter au contenu\n          alignItems: 'start'\n        },\n        children: filteredCategories.map(category => {\n          var _categoryStates$categ;\n          return /*#__PURE__*/_jsxDEV(CategoryFreeGrid, {\n            category: category.name,\n            tasks: category.tasks,\n            isOpen: (_categoryStates$categ = categoryStates[category.name]) !== null && _categoryStates$categ !== void 0 ? _categoryStates$categ : false,\n            isAdminMode: isAdminMode,\n            onToggleCategory: handleToggleCategory,\n            onTaskClick: handleTaskClick,\n            onReorderTasks: handleReorderTasks,\n            searchTerm: searchTerm,\n            gridColumns: 1\n          }, category.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 25\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 351,\n    columnNumber: 9\n  }, this);\n};\n_s3(DashboardMaison, \"2z/e+O9wO2YGMvboOthtWP65jlQ=\");\n_c4 = DashboardMaison;\nexport default DashboardMaison;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"SortableTaskItem\");\n$RefreshReg$(_c2, \"TaskItem\");\n$RefreshReg$(_c3, \"CategoryFreeGrid\");\n$RefreshReg$(_c4, \"DashboardMaison\");","map":{"version":3,"names":["React","useState","useMemo","PropTypes","DndContext","closestCenter","KeyboardSensor","PointerSensor","useSensor","useSensors","arrayMove","SortableContext","sortableKeyboardCoordinates","verticalListSortingStrategy","useSortable","CSS","jsxDEV","_jsxDEV","SortableTaskItem","task","onTaskClick","_s","_task$fields","_task$fields$find","attributes","listeners","setNodeRef","transform","transition","isDragging","id","style","Transform","toString","opacity","ref","className","onClick","title","children","fileName","_jsxFileName","lineNumber","columnNumber","fields","find","f","key","value","name","_c","TaskItem","_task$fields2","_task$fields2$find","_c2","CategoryFreeGrid","category","tasks","isOpen","isAdminMode","onToggleCategory","onReorderTasks","searchTerm","gridColumns","_gridColumns","_s2","filteredTasks","searchLower","toLowerCase","filter","_task$fields3","_task$fields3$find","modelNumber","includes","sensors","coordinateGetter","handleDragEnd","event","active","over","oldIndex","findIndex","newIndex","reorderedTasks","createGrid","taskCount","length","rows","Math","ceil","totalCells","grid","Array","fill","forEach","index","height","e","onKeyDown","preventDefault","role","tabIndex","collisionDetection","onDragEnd","items","map","strategy","display","gridTemplateColumns","gap","padding","gridPosition","_c3","DashboardMaison","appData","onTabChange","onTaskSelect","onAdminPanel","onReorderTasksInCategory","_s3","categoryStates","setCategoryStates","setSearchTerm","categoriesData","categories","Map","Object","keys","tabName","categoryName","has","set","get","push","from","values","sort","a","b","localeCompare","propTypes","object","isRequired","func","bool","string","array","number","filteredCategories","categoryMatches","hasMatchingTasks","some","_task$fields4","_task$fields4$find","handleToggleCategory","stopPropagation","prev","handleTaskClick","handleReorderTasks","_categoriesData$find","originalTasks","cat","sourceIndex","targetIndex","getTotalTaskCount","reduce","total","type","placeholder","onChange","target","width","gridAutoFlow","gridTemplateRows","alignItems","_categoryStates$categ","_c4","$RefreshReg$"],"sources":["D:/CODE/covalen-app/src/components/DashboardMaison.js"],"sourcesContent":["import React, { useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    DndContext,\n    closestCenter,\n    KeyboardSensor,\n    PointerSensor,\n    useSensor,\n    useSensors,\n} from '@dnd-kit/core';\nimport {\n    arrayMove,\n    SortableContext,\n    sortableKeyboardCoordinates,\n    verticalListSortingStrategy,\n    useSortable,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\n\n// Composant Task draggable avec dnd-kit\nconst SortableTaskItem = ({ task, onTaskClick }) => {\n    const {\n        attributes,\n        listeners,\n        setNodeRef,\n        transform,\n        transition,\n        isDragging,\n    } = useSortable({ id: task.id });\n\n    const style = {\n        transform: CSS.Transform.toString(transform),\n        transition,\n        opacity: isDragging ? 0.6 : 1,\n    };\n\n    return (\n        <div\n            ref={setNodeRef}\n            style={style}\n            className={`task-item clickable compact grid-task ${isDragging ? 'dragging' : ''}`}\n            onClick={() => onTaskClick(task)}\n            title=\"Glissez pour réorganiser\"\n        >\n            <div className=\"task-content-compact\">\n                <span\n                    className=\"drag-handle enhanced-handle compact-handle\"\n                    title=\"Réorganiser\"\n                    {...attributes}\n                    {...listeners}\n                >\n                    ⋮⋮\n                </span>\n                <div className=\"task-info\">\n                    <span className=\"task-number\">\n                        {task.fields?.find(f => f.key === 'modelNumber')?.value}\n                    </span>\n                    <span className=\"task-name-compact\">\n                        {task.name}\n                    </span>\n                </div>\n            </div>\n        </div>\n    );\n};\n\n// Composant Task simple (sans drag & drop pour comparaison)\nconst TaskItem = ({ task, onTaskClick }) => {\n    return (\n        <div\n            className=\"task-item clickable compact grid-task\"\n            onClick={() => onTaskClick(task)}\n            title=\"Cliquez pour voir les détails\"\n        >\n            <div className=\"task-content-compact\">\n                <div className=\"task-info\">\n                    <span className=\"task-number\">\n                        {task.fields?.find(f => f.key === 'modelNumber')?.value}\n                    </span>\n                    <span className=\"task-name-compact\">\n                        {task.name}\n                    </span>\n                </div>\n            </div>\n        </div>\n    );\n};\n\n// Composant de grille libre pour une catégorie\nconst CategoryFreeGrid = ({\n    category,\n    tasks,\n    isOpen,\n    isAdminMode,\n    onToggleCategory,\n    onTaskClick,\n    onReorderTasks,\n    searchTerm,\n    gridColumns: _gridColumns = 1 // on capture la prop mais on ne l'utilise pas\n}) => {\n    const gridColumns = 1; // on force la valeur ici\n    // Filtrer les tâches localement\n    const filteredTasks = useMemo(() => {\n        if (!searchTerm) return tasks;\n\n        const searchLower = searchTerm.toLowerCase();\n        return tasks.filter(task => {\n            const modelNumber = task.fields?.find(f => f.key === 'modelNumber')?.value || '';\n            return (\n                task.name.toLowerCase().includes(searchLower) ||\n                modelNumber.toLowerCase().includes(searchLower) ||\n                category.toLowerCase().includes(searchLower)\n            );\n        });\n    }, [tasks, searchTerm, category]);\n\n    // Configuration des sensors pour dnd-kit\n    const sensors = useSensors(\n        useSensor(PointerSensor),\n        useSensor(KeyboardSensor, {\n            coordinateGetter: sortableKeyboardCoordinates,\n        })\n    );\n\n    // Gestion du drag end\n    const handleDragEnd = (event) => {\n        const { active, over } = event;\n\n        if (active.id !== over?.id) {\n            const oldIndex = filteredTasks.findIndex(task => task.id === active.id);\n            const newIndex = filteredTasks.findIndex(task => task.id === over.id);\n\n            if (oldIndex !== -1 && newIndex !== -1) {\n                const reorderedTasks = arrayMove(filteredTasks, oldIndex, newIndex);\n                onReorderTasks(category, reorderedTasks);\n            }\n        }\n    };\n\n    // Créer une grille simple\n    const createGrid = useMemo(() => {\n        // Calculer le nombre de lignes nécessaires\n        const taskCount = filteredTasks.length;\n        const rows = Math.ceil(taskCount / gridColumns);\n        const totalCells = rows * gridColumns;\n\n        // Créer un array pour la grille\n        const grid = Array(totalCells).fill(null);\n\n        // Placer les tâches dans la grille séquentiellement\n        filteredTasks.forEach((task, index) => {\n            if (index < totalCells) {\n                grid[index] = task;\n            }\n        });\n\n        return { grid, rows, totalCells };\n    }, [filteredTasks, gridColumns]);\n\n    return (\n        <div className=\"category-section\" style={{ height: 'fit-content' }}>\n            <div\n                className={`category-header ${isAdminMode ? 'admin-mode' : ''}`}\n                onClick={(e) => onToggleCategory(category, e)}\n                onKeyDown={(e) => {\n                    if (e.key === 'Enter' || e.key === ' ') {\n                        e.preventDefault();\n                        onToggleCategory(category, e);\n                    }\n                }}\n                role=\"button\"\n                tabIndex={0}\n                aria-expanded={isOpen}\n                aria-label={`Toggle ${category} category`}\n            >\n                <div className=\"category-left\">\n                    <span className=\"category-toggle\">\n                        {isOpen ? '▼' : '▶'}\n                    </span>\n                    <span className=\"category-name\">{category}</span>\n                    {isAdminMode && (\n                        <span className=\"task-count\">({filteredTasks.length})</span>\n                    )}\n                </div>\n                <span className=\"category-goto\">→</span>\n            </div>\n\n            {isOpen && (\n                <DndContext\n                    sensors={sensors}\n                    collisionDetection={closestCenter}\n                    onDragEnd={handleDragEnd}\n                >\n                    <SortableContext\n                        items={filteredTasks.map(task => task.id)}\n                        strategy={verticalListSortingStrategy}\n                    >\n                        <div\n                            className=\"tasks-free-grid\"\n                            style={{\n                                display: 'grid',\n                                gridTemplateColumns: `repeat(${gridColumns}, 1fr)`,\n                                gap: '8px',\n                                padding: '16px'\n                            }}\n                        >\n                            {createGrid.grid.map((task, gridPosition) => (\n                                <div key={`grid-cell-${gridPosition}`} className=\"grid-cell\">\n                                    {task ? (\n                                        <SortableTaskItem\n                                            task={task}\n                                            onTaskClick={onTaskClick}\n                                        />\n                                    ) : (\n                                        <div className=\"empty-grid-cell\">\n                                            {/* Cellule vide */}\n                                        </div>\n                                    )}\n                                </div>\n                            ))}\n                        </div>\n                    </SortableContext>\n                </DndContext>\n            )}\n        </div>\n    );\n};\n\n\n\n\nconst DashboardMaison = ({\n    appData,\n    onTabChange,\n    onTaskSelect,\n    onAdminPanel,\n    isAdminMode,\n    onReorderTasksInCategory\n}) => {\n    const [categoryStates, setCategoryStates] = useState({});\n    const [searchTerm, setSearchTerm] = useState('');\n\n\n    // Données organisées par catégorie\n    const categoriesData = useMemo(() => {\n        const categories = new Map();\n\n        Object.keys(appData).forEach(tabName => {\n            if (tabName !== 'Maison' && tabName !== 'Admin') {\n                const tasks = appData[tabName] || [];\n                tasks.forEach(task => {\n                    const categoryName = task.category || 'Autres';\n\n                    if (!categories.has(categoryName)) {\n                        categories.set(categoryName, {\n                            name: categoryName,\n                            tasks: []\n                        });\n                    }\n\n                    categories.get(categoryName).tasks.push({\n                        ...task,\n                        tabName\n                    });\n                });\n            }\n        });\n\n        return Array.from(categories.values())\n            .sort((a, b) => a.name.localeCompare(b.name));\n    }, [appData]);\n    DashboardMaison.propTypes = {\n        appData: PropTypes.object.isRequired,\n        onTabChange: PropTypes.func.isRequired,\n        onTaskSelect: PropTypes.func.isRequired,\n        onAdminPanel: PropTypes.func.isRequired,\n        isAdminMode: PropTypes.bool.isRequired,\n        onReorderTasksInCategory: PropTypes.func.isRequired,\n    };\n\n    SortableTaskItem.propTypes = {\n        task: PropTypes.object.isRequired,\n        onTaskClick: PropTypes.func.isRequired,\n    };\n\n    TaskItem.propTypes = {\n        task: PropTypes.object.isRequired,\n        onTaskClick: PropTypes.func.isRequired,\n    };\n\n    CategoryFreeGrid.propTypes = {\n        category: PropTypes.string.isRequired,\n        tasks: PropTypes.array.isRequired,\n        isOpen: PropTypes.bool.isRequired,\n        isAdminMode: PropTypes.bool.isRequired,\n        onToggleCategory: PropTypes.func.isRequired,\n        onTaskClick: PropTypes.func.isRequired,\n        onReorderTasks: PropTypes.func.isRequired,\n        searchTerm: PropTypes.string,\n        gridColumns: PropTypes.number,\n    };\n    // Filtrage des catégories\n    const filteredCategories = useMemo(() => {\n        if (!searchTerm) return categoriesData;\n\n        const searchLower = searchTerm.toLowerCase();\n\n        return categoriesData.filter(category => {\n            const categoryMatches = category.name.toLowerCase().includes(searchLower);\n            const hasMatchingTasks = category.tasks.some(task => {\n                const modelNumber = task.fields?.find(f => f.key === 'modelNumber')?.value || '';\n                return (\n                    task.name.toLowerCase().includes(searchLower) ||\n                    modelNumber.toLowerCase().includes(searchLower)\n                );\n            });\n\n            return categoryMatches || hasMatchingTasks;\n        });\n    }, [categoriesData, searchTerm]);\n\n    const handleToggleCategory = (categoryName, event) => {\n        event.stopPropagation();\n        setCategoryStates(prev => ({\n            ...prev,\n            [categoryName]: !prev[categoryName]\n        }));\n    };\n\n    const handleTaskClick = (task) => {\n        onTabChange(task.tabName);\n        onTaskSelect(task);\n    };\n\n    const handleReorderTasks = (categoryName, reorderedTasks) => {\n        if (onReorderTasksInCategory) {\n            // Trouver les indices des tâches dans le tableau d'origine\n            const originalTasks = categoriesData.find(cat => cat.name === categoryName)?.tasks || [];\n            const sourceIndex = originalTasks.findIndex(task => task.id === reorderedTasks[0].id);\n            const targetIndex = reorderedTasks.findIndex(task => task.id === originalTasks[sourceIndex].id);\n\n            onReorderTasksInCategory(categoryName, sourceIndex, targetIndex);\n        }\n    };\n\n    const getTotalTaskCount = () => {\n        return filteredCategories.reduce((total, category) => total + category.tasks.length, 0);\n    };\n\n    return (\n        <div className=\"dashboard-container\">\n            <div className=\"dashboard-header\">\n                <h1 className=\"dashboard-title\">Covalen</h1>\n            </div>\n\n            <p className=\"welcome-message\">\n                Bienvenue sur votre tableau de bord centralisé.\n            </p>\n\n            {isAdminMode && (\n                <div className=\"admin-dashboard-section\">\n                    <div className=\"admin-banner\">\n                        <p className=\"admin-banner-text\">Mode Admin Actif sur le Dashboard.</p>\n                        <button className=\"admin-manage-btn\" onClick={onAdminPanel}>\n                            Gérer les Onglets\n                        </button>\n                    </div>\n                </div>\n            )}\n\n            <div className=\"overview-section\">\n                <h2 className=\"overview-title\">Vue d'overview des Tâches</h2>\n\n                <div className=\"search-container\">\n                    <div className=\"search-bar\">\n                        <span className=\"search-icon\">🔍</span>\n                        <input\n                            type=\"text\"\n                            placeholder=\"Rechercher une tâche, catégorie ou numéro...\"\n                            value={searchTerm}\n                            onChange={(e) => setSearchTerm(e.target.value)}\n                            className=\"search-input\"\n                        />\n                        {searchTerm && (\n                            <button\n                                className=\"search-clear\"\n                                onClick={() => setSearchTerm('')}\n                                title=\"Effacer la recherche\"\n                            >\n                                ✕\n                            </button>\n                        )}\n                    </div>\n                    <div className=\"search-hints\">\n                        <span className=\"search-hint\">💡 Affichage en grille simple</span>\n                    </div>\n                    {searchTerm && (\n                        <div className=\"search-results-info\">\n                            {filteredCategories.length === 0\n                                ? `Aucun résultat pour \"${searchTerm}\"`\n                                : `${getTotalTaskCount()} tâche(s) trouvée(s) dans ${filteredCategories.length} catégorie(s)`\n                            }\n                        </div>\n                    )}\n                </div>\n\n                <div\n                    className=\"categories-container\"\n                    style={{\n                        display: 'grid',\n                        gridTemplateColumns: 'repeat(4, 1fr)',\n                        gap: '16px',\n                        width: '100%',\n                        gridAutoFlow: 'column', // Changez ceci pour une disposition en colonne\n                        gridTemplateRows: 'auto', // Permettre aux lignes de s'adapter au contenu\n                        alignItems: 'start'\n                    }}\n                >\n                    {filteredCategories.map(category => (\n                        <CategoryFreeGrid\n                            key={category.name}\n                            category={category.name}\n                            tasks={category.tasks}\n                            isOpen={categoryStates[category.name] ?? false}\n                            isAdminMode={isAdminMode}\n                            onToggleCategory={handleToggleCategory}\n                            onTaskClick={handleTaskClick}\n                            onReorderTasks={handleReorderTasks}\n                            searchTerm={searchTerm}\n                            gridColumns={1}\n                        />\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DashboardMaison;\n"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,OAAO,QAAQ,OAAO;AAChD,OAAOC,SAAS,MAAM,YAAY;AAClC,SACIC,UAAU,EACVC,aAAa,EACbC,cAAc,EACdC,aAAa,EACbC,SAAS,EACTC,UAAU,QACP,eAAe;AACtB,SACIC,SAAS,EACTC,eAAe,EACfC,2BAA2B,EAC3BC,2BAA2B,EAC3BC,WAAW,QACR,mBAAmB;AAC1B,SAASC,GAAG,QAAQ,oBAAoB;;AAExC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAAA,IAAAC,YAAA,EAAAC,iBAAA;EAChD,MAAM;IACFC,UAAU;IACVC,SAAS;IACTC,UAAU;IACVC,SAAS;IACTC,UAAU;IACVC;EACJ,CAAC,GAAGf,WAAW,CAAC;IAAEgB,EAAE,EAAEX,IAAI,CAACW;EAAG,CAAC,CAAC;EAEhC,MAAMC,KAAK,GAAG;IACVJ,SAAS,EAAEZ,GAAG,CAACiB,SAAS,CAACC,QAAQ,CAACN,SAAS,CAAC;IAC5CC,UAAU;IACVM,OAAO,EAAEL,UAAU,GAAG,GAAG,GAAG;EAChC,CAAC;EAED,oBACIZ,OAAA;IACIkB,GAAG,EAAET,UAAW;IAChBK,KAAK,EAAEA,KAAM;IACbK,SAAS,EAAE,yCAAyCP,UAAU,GAAG,UAAU,GAAG,EAAE,EAAG;IACnFQ,OAAO,EAAEA,CAAA,KAAMjB,WAAW,CAACD,IAAI,CAAE;IACjCmB,KAAK,EAAC,6BAA0B;IAAAC,QAAA,eAEhCtB,OAAA;MAAKmB,SAAS,EAAC,sBAAsB;MAAAG,QAAA,gBACjCtB,OAAA;QACImB,SAAS,EAAC,4CAA4C;QACtDE,KAAK,EAAC,gBAAa;QAAA,GACfd,UAAU;QAAA,GACVC,SAAS;QAAAc,QAAA,EAChB;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACP1B,OAAA;QAAKmB,SAAS,EAAC,WAAW;QAAAG,QAAA,gBACtBtB,OAAA;UAAMmB,SAAS,EAAC,aAAa;UAAAG,QAAA,GAAAjB,YAAA,GACxBH,IAAI,CAACyB,MAAM,cAAAtB,YAAA,wBAAAC,iBAAA,GAAXD,YAAA,CAAauB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAK,aAAa,CAAC,cAAAxB,iBAAA,uBAA/CA,iBAAA,CAAiDyB;QAAK;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrD,CAAC,eACP1B,OAAA;UAAMmB,SAAS,EAAC,mBAAmB;UAAAG,QAAA,EAC9BpB,IAAI,CAAC8B;QAAI;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;;AAED;AAAAtB,EAAA,CA9CMH,gBAAgB;EAAA,QAQdJ,WAAW;AAAA;AAAAoC,EAAA,GARbhC,gBAAgB;AA+CtB,MAAMiC,QAAQ,GAAGA,CAAC;EAAEhC,IAAI;EAAEC;AAAY,CAAC,KAAK;EAAA,IAAAgC,aAAA,EAAAC,kBAAA;EACxC,oBACIpC,OAAA;IACImB,SAAS,EAAC,uCAAuC;IACjDC,OAAO,EAAEA,CAAA,KAAMjB,WAAW,CAACD,IAAI,CAAE;IACjCmB,KAAK,EAAC,kCAA+B;IAAAC,QAAA,eAErCtB,OAAA;MAAKmB,SAAS,EAAC,sBAAsB;MAAAG,QAAA,eACjCtB,OAAA;QAAKmB,SAAS,EAAC,WAAW;QAAAG,QAAA,gBACtBtB,OAAA;UAAMmB,SAAS,EAAC,aAAa;UAAAG,QAAA,GAAAa,aAAA,GACxBjC,IAAI,CAACyB,MAAM,cAAAQ,aAAA,wBAAAC,kBAAA,GAAXD,aAAA,CAAaP,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAK,aAAa,CAAC,cAAAM,kBAAA,uBAA/CA,kBAAA,CAAiDL;QAAK;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrD,CAAC,eACP1B,OAAA;UAAMmB,SAAS,EAAC,mBAAmB;UAAAG,QAAA,EAC9BpB,IAAI,CAAC8B;QAAI;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;;AAED;AAAAW,GAAA,GArBMH,QAAQ;AAsBd,MAAMI,gBAAgB,GAAGA,CAAC;EACtBC,QAAQ;EACRC,KAAK;EACLC,MAAM;EACNC,WAAW;EACXC,gBAAgB;EAChBxC,WAAW;EACXyC,cAAc;EACdC,UAAU;EACVC,WAAW,EAAEC,YAAY,GAAG,CAAC,CAAC;AAClC,CAAC,KAAK;EAAAC,GAAA;EACF,MAAMF,WAAW,GAAG,CAAC,CAAC,CAAC;EACvB;EACA,MAAMG,aAAa,GAAGhE,OAAO,CAAC,MAAM;IAChC,IAAI,CAAC4D,UAAU,EAAE,OAAOL,KAAK;IAE7B,MAAMU,WAAW,GAAGL,UAAU,CAACM,WAAW,CAAC,CAAC;IAC5C,OAAOX,KAAK,CAACY,MAAM,CAAClD,IAAI,IAAI;MAAA,IAAAmD,aAAA,EAAAC,kBAAA;MACxB,MAAMC,WAAW,GAAG,EAAAF,aAAA,GAAAnD,IAAI,CAACyB,MAAM,cAAA0B,aAAA,wBAAAC,kBAAA,GAAXD,aAAA,CAAazB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAK,aAAa,CAAC,cAAAwB,kBAAA,uBAA/CA,kBAAA,CAAiDvB,KAAK,KAAI,EAAE;MAChF,OACI7B,IAAI,CAAC8B,IAAI,CAACmB,WAAW,CAAC,CAAC,CAACK,QAAQ,CAACN,WAAW,CAAC,IAC7CK,WAAW,CAACJ,WAAW,CAAC,CAAC,CAACK,QAAQ,CAACN,WAAW,CAAC,IAC/CX,QAAQ,CAACY,WAAW,CAAC,CAAC,CAACK,QAAQ,CAACN,WAAW,CAAC;IAEpD,CAAC,CAAC;EACN,CAAC,EAAE,CAACV,KAAK,EAAEK,UAAU,EAAEN,QAAQ,CAAC,CAAC;;EAEjC;EACA,MAAMkB,OAAO,GAAGjE,UAAU,CACtBD,SAAS,CAACD,aAAa,CAAC,EACxBC,SAAS,CAACF,cAAc,EAAE;IACtBqE,gBAAgB,EAAE/D;EACtB,CAAC,CACL,CAAC;;EAED;EACA,MAAMgE,aAAa,GAAIC,KAAK,IAAK;IAC7B,MAAM;MAAEC,MAAM;MAAEC;IAAK,CAAC,GAAGF,KAAK;IAE9B,IAAIC,MAAM,CAAChD,EAAE,MAAKiD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEjD,EAAE,GAAE;MACxB,MAAMkD,QAAQ,GAAGd,aAAa,CAACe,SAAS,CAAC9D,IAAI,IAAIA,IAAI,CAACW,EAAE,KAAKgD,MAAM,CAAChD,EAAE,CAAC;MACvE,MAAMoD,QAAQ,GAAGhB,aAAa,CAACe,SAAS,CAAC9D,IAAI,IAAIA,IAAI,CAACW,EAAE,KAAKiD,IAAI,CAACjD,EAAE,CAAC;MAErE,IAAIkD,QAAQ,KAAK,CAAC,CAAC,IAAIE,QAAQ,KAAK,CAAC,CAAC,EAAE;QACpC,MAAMC,cAAc,GAAGzE,SAAS,CAACwD,aAAa,EAAEc,QAAQ,EAAEE,QAAQ,CAAC;QACnErB,cAAc,CAACL,QAAQ,EAAE2B,cAAc,CAAC;MAC5C;IACJ;EACJ,CAAC;;EAED;EACA,MAAMC,UAAU,GAAGlF,OAAO,CAAC,MAAM;IAC7B;IACA,MAAMmF,SAAS,GAAGnB,aAAa,CAACoB,MAAM;IACtC,MAAMC,IAAI,GAAGC,IAAI,CAACC,IAAI,CAACJ,SAAS,GAAGtB,WAAW,CAAC;IAC/C,MAAM2B,UAAU,GAAGH,IAAI,GAAGxB,WAAW;;IAErC;IACA,MAAM4B,IAAI,GAAGC,KAAK,CAACF,UAAU,CAAC,CAACG,IAAI,CAAC,IAAI,CAAC;;IAEzC;IACA3B,aAAa,CAAC4B,OAAO,CAAC,CAAC3E,IAAI,EAAE4E,KAAK,KAAK;MACnC,IAAIA,KAAK,GAAGL,UAAU,EAAE;QACpBC,IAAI,CAACI,KAAK,CAAC,GAAG5E,IAAI;MACtB;IACJ,CAAC,CAAC;IAEF,OAAO;MAAEwE,IAAI;MAAEJ,IAAI;MAAEG;IAAW,CAAC;EACrC,CAAC,EAAE,CAACxB,aAAa,EAAEH,WAAW,CAAC,CAAC;EAEhC,oBACI9C,OAAA;IAAKmB,SAAS,EAAC,kBAAkB;IAACL,KAAK,EAAE;MAAEiE,MAAM,EAAE;IAAc,CAAE;IAAAzD,QAAA,gBAC/DtB,OAAA;MACImB,SAAS,EAAE,mBAAmBuB,WAAW,GAAG,YAAY,GAAG,EAAE,EAAG;MAChEtB,OAAO,EAAG4D,CAAC,IAAKrC,gBAAgB,CAACJ,QAAQ,EAAEyC,CAAC,CAAE;MAC9CC,SAAS,EAAGD,CAAC,IAAK;QACd,IAAIA,CAAC,CAAClD,GAAG,KAAK,OAAO,IAAIkD,CAAC,CAAClD,GAAG,KAAK,GAAG,EAAE;UACpCkD,CAAC,CAACE,cAAc,CAAC,CAAC;UAClBvC,gBAAgB,CAACJ,QAAQ,EAAEyC,CAAC,CAAC;QACjC;MACJ,CAAE;MACFG,IAAI,EAAC,QAAQ;MACbC,QAAQ,EAAE,CAAE;MACZ,iBAAe3C,MAAO;MACtB,cAAY,UAAUF,QAAQ,WAAY;MAAAjB,QAAA,gBAE1CtB,OAAA;QAAKmB,SAAS,EAAC,eAAe;QAAAG,QAAA,gBAC1BtB,OAAA;UAAMmB,SAAS,EAAC,iBAAiB;UAAAG,QAAA,EAC5BmB,MAAM,GAAG,GAAG,GAAG;QAAG;UAAAlB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjB,CAAC,eACP1B,OAAA;UAAMmB,SAAS,EAAC,eAAe;UAAAG,QAAA,EAAEiB;QAAQ;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,EAChDgB,WAAW,iBACR1C,OAAA;UAAMmB,SAAS,EAAC,YAAY;UAAAG,QAAA,GAAC,GAAC,EAAC2B,aAAa,CAACoB,MAAM,EAAC,GAAC;QAAA;UAAA9C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAC9D;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACN1B,OAAA;QAAMmB,SAAS,EAAC,eAAe;QAAAG,QAAA,EAAC;MAAC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CAAC,EAELe,MAAM,iBACHzC,OAAA,CAACb,UAAU;MACPsE,OAAO,EAAEA,OAAQ;MACjB4B,kBAAkB,EAAEjG,aAAc;MAClCkG,SAAS,EAAE3B,aAAc;MAAArC,QAAA,eAEzBtB,OAAA,CAACN,eAAe;QACZ6F,KAAK,EAAEtC,aAAa,CAACuC,GAAG,CAACtF,IAAI,IAAIA,IAAI,CAACW,EAAE,CAAE;QAC1C4E,QAAQ,EAAE7F,2BAA4B;QAAA0B,QAAA,eAEtCtB,OAAA;UACImB,SAAS,EAAC,iBAAiB;UAC3BL,KAAK,EAAE;YACH4E,OAAO,EAAE,MAAM;YACfC,mBAAmB,EAAE,UAAU7C,WAAW,QAAQ;YAClD8C,GAAG,EAAE,KAAK;YACVC,OAAO,EAAE;UACb,CAAE;UAAAvE,QAAA,EAED6C,UAAU,CAACO,IAAI,CAACc,GAAG,CAAC,CAACtF,IAAI,EAAE4F,YAAY,kBACpC9F,OAAA;YAAuCmB,SAAS,EAAC,WAAW;YAAAG,QAAA,EACvDpB,IAAI,gBACDF,OAAA,CAACC,gBAAgB;cACbC,IAAI,EAAEA,IAAK;cACXC,WAAW,EAAEA;YAAY;cAAAoB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC5B,CAAC,gBAEF1B,OAAA;cAAKmB,SAAS,EAAC;YAAiB;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAE3B;UACR,GAVK,aAAaoE,YAAY,EAAE;YAAAvE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAWhC,CACR;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACO;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CACf;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACsB,GAAA,CAzIIV,gBAAgB;EAAA,QA4BF9C,UAAU,EACtBD,SAAS,EACTA,SAAS;AAAA;AAAAwG,GAAA,GA9BXzD,gBAAgB;AA8ItB,MAAM0D,eAAe,GAAGA,CAAC;EACrBC,OAAO;EACPC,WAAW;EACXC,YAAY;EACZC,YAAY;EACZ1D,WAAW;EACX2D;AACJ,CAAC,KAAK;EAAAC,GAAA;EACF,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGxH,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxD,MAAM,CAAC6D,UAAU,EAAE4D,aAAa,CAAC,GAAGzH,QAAQ,CAAC,EAAE,CAAC;;EAGhD;EACA,MAAM0H,cAAc,GAAGzH,OAAO,CAAC,MAAM;IACjC,MAAM0H,UAAU,GAAG,IAAIC,GAAG,CAAC,CAAC;IAE5BC,MAAM,CAACC,IAAI,CAACb,OAAO,CAAC,CAACpB,OAAO,CAACkC,OAAO,IAAI;MACpC,IAAIA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,OAAO,EAAE;QAC7C,MAAMvE,KAAK,GAAGyD,OAAO,CAACc,OAAO,CAAC,IAAI,EAAE;QACpCvE,KAAK,CAACqC,OAAO,CAAC3E,IAAI,IAAI;UAClB,MAAM8G,YAAY,GAAG9G,IAAI,CAACqC,QAAQ,IAAI,QAAQ;UAE9C,IAAI,CAACoE,UAAU,CAACM,GAAG,CAACD,YAAY,CAAC,EAAE;YAC/BL,UAAU,CAACO,GAAG,CAACF,YAAY,EAAE;cACzBhF,IAAI,EAAEgF,YAAY;cAClBxE,KAAK,EAAE;YACX,CAAC,CAAC;UACN;UAEAmE,UAAU,CAACQ,GAAG,CAACH,YAAY,CAAC,CAACxE,KAAK,CAAC4E,IAAI,CAAC;YACpC,GAAGlH,IAAI;YACP6G;UACJ,CAAC,CAAC;QACN,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;IAEF,OAAOpC,KAAK,CAAC0C,IAAI,CAACV,UAAU,CAACW,MAAM,CAAC,CAAC,CAAC,CACjCC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACxF,IAAI,CAAC0F,aAAa,CAACD,CAAC,CAACzF,IAAI,CAAC,CAAC;EACrD,CAAC,EAAE,CAACiE,OAAO,CAAC,CAAC;EACbD,eAAe,CAAC2B,SAAS,GAAG;IACxB1B,OAAO,EAAE/G,SAAS,CAAC0I,MAAM,CAACC,UAAU;IACpC3B,WAAW,EAAEhH,SAAS,CAAC4I,IAAI,CAACD,UAAU;IACtC1B,YAAY,EAAEjH,SAAS,CAAC4I,IAAI,CAACD,UAAU;IACvCzB,YAAY,EAAElH,SAAS,CAAC4I,IAAI,CAACD,UAAU;IACvCnF,WAAW,EAAExD,SAAS,CAAC6I,IAAI,CAACF,UAAU;IACtCxB,wBAAwB,EAAEnH,SAAS,CAAC4I,IAAI,CAACD;EAC7C,CAAC;EAED5H,gBAAgB,CAAC0H,SAAS,GAAG;IACzBzH,IAAI,EAAEhB,SAAS,CAAC0I,MAAM,CAACC,UAAU;IACjC1H,WAAW,EAAEjB,SAAS,CAAC4I,IAAI,CAACD;EAChC,CAAC;EAED3F,QAAQ,CAACyF,SAAS,GAAG;IACjBzH,IAAI,EAAEhB,SAAS,CAAC0I,MAAM,CAACC,UAAU;IACjC1H,WAAW,EAAEjB,SAAS,CAAC4I,IAAI,CAACD;EAChC,CAAC;EAEDvF,gBAAgB,CAACqF,SAAS,GAAG;IACzBpF,QAAQ,EAAErD,SAAS,CAAC8I,MAAM,CAACH,UAAU;IACrCrF,KAAK,EAAEtD,SAAS,CAAC+I,KAAK,CAACJ,UAAU;IACjCpF,MAAM,EAAEvD,SAAS,CAAC6I,IAAI,CAACF,UAAU;IACjCnF,WAAW,EAAExD,SAAS,CAAC6I,IAAI,CAACF,UAAU;IACtClF,gBAAgB,EAAEzD,SAAS,CAAC4I,IAAI,CAACD,UAAU;IAC3C1H,WAAW,EAAEjB,SAAS,CAAC4I,IAAI,CAACD,UAAU;IACtCjF,cAAc,EAAE1D,SAAS,CAAC4I,IAAI,CAACD,UAAU;IACzChF,UAAU,EAAE3D,SAAS,CAAC8I,MAAM;IAC5BlF,WAAW,EAAE5D,SAAS,CAACgJ;EAC3B,CAAC;EACD;EACA,MAAMC,kBAAkB,GAAGlJ,OAAO,CAAC,MAAM;IACrC,IAAI,CAAC4D,UAAU,EAAE,OAAO6D,cAAc;IAEtC,MAAMxD,WAAW,GAAGL,UAAU,CAACM,WAAW,CAAC,CAAC;IAE5C,OAAOuD,cAAc,CAACtD,MAAM,CAACb,QAAQ,IAAI;MACrC,MAAM6F,eAAe,GAAG7F,QAAQ,CAACP,IAAI,CAACmB,WAAW,CAAC,CAAC,CAACK,QAAQ,CAACN,WAAW,CAAC;MACzE,MAAMmF,gBAAgB,GAAG9F,QAAQ,CAACC,KAAK,CAAC8F,IAAI,CAACpI,IAAI,IAAI;QAAA,IAAAqI,aAAA,EAAAC,kBAAA;QACjD,MAAMjF,WAAW,GAAG,EAAAgF,aAAA,GAAArI,IAAI,CAACyB,MAAM,cAAA4G,aAAA,wBAAAC,kBAAA,GAAXD,aAAA,CAAa3G,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAK,aAAa,CAAC,cAAA0G,kBAAA,uBAA/CA,kBAAA,CAAiDzG,KAAK,KAAI,EAAE;QAChF,OACI7B,IAAI,CAAC8B,IAAI,CAACmB,WAAW,CAAC,CAAC,CAACK,QAAQ,CAACN,WAAW,CAAC,IAC7CK,WAAW,CAACJ,WAAW,CAAC,CAAC,CAACK,QAAQ,CAACN,WAAW,CAAC;MAEvD,CAAC,CAAC;MAEF,OAAOkF,eAAe,IAAIC,gBAAgB;IAC9C,CAAC,CAAC;EACN,CAAC,EAAE,CAAC3B,cAAc,EAAE7D,UAAU,CAAC,CAAC;EAEhC,MAAM4F,oBAAoB,GAAGA,CAACzB,YAAY,EAAEpD,KAAK,KAAK;IAClDA,KAAK,CAAC8E,eAAe,CAAC,CAAC;IACvBlC,iBAAiB,CAACmC,IAAI,KAAK;MACvB,GAAGA,IAAI;MACP,CAAC3B,YAAY,GAAG,CAAC2B,IAAI,CAAC3B,YAAY;IACtC,CAAC,CAAC,CAAC;EACP,CAAC;EAED,MAAM4B,eAAe,GAAI1I,IAAI,IAAK;IAC9BgG,WAAW,CAAChG,IAAI,CAAC6G,OAAO,CAAC;IACzBZ,YAAY,CAACjG,IAAI,CAAC;EACtB,CAAC;EAED,MAAM2I,kBAAkB,GAAGA,CAAC7B,YAAY,EAAE9C,cAAc,KAAK;IACzD,IAAImC,wBAAwB,EAAE;MAAA,IAAAyC,oBAAA;MAC1B;MACA,MAAMC,aAAa,GAAG,EAAAD,oBAAA,GAAApC,cAAc,CAAC9E,IAAI,CAACoH,GAAG,IAAIA,GAAG,CAAChH,IAAI,KAAKgF,YAAY,CAAC,cAAA8B,oBAAA,uBAArDA,oBAAA,CAAuDtG,KAAK,KAAI,EAAE;MACxF,MAAMyG,WAAW,GAAGF,aAAa,CAAC/E,SAAS,CAAC9D,IAAI,IAAIA,IAAI,CAACW,EAAE,KAAKqD,cAAc,CAAC,CAAC,CAAC,CAACrD,EAAE,CAAC;MACrF,MAAMqI,WAAW,GAAGhF,cAAc,CAACF,SAAS,CAAC9D,IAAI,IAAIA,IAAI,CAACW,EAAE,KAAKkI,aAAa,CAACE,WAAW,CAAC,CAACpI,EAAE,CAAC;MAE/FwF,wBAAwB,CAACW,YAAY,EAAEiC,WAAW,EAAEC,WAAW,CAAC;IACpE;EACJ,CAAC;EAED,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;IAC5B,OAAOhB,kBAAkB,CAACiB,MAAM,CAAC,CAACC,KAAK,EAAE9G,QAAQ,KAAK8G,KAAK,GAAG9G,QAAQ,CAACC,KAAK,CAAC6B,MAAM,EAAE,CAAC,CAAC;EAC3F,CAAC;EAED,oBACIrE,OAAA;IAAKmB,SAAS,EAAC,qBAAqB;IAAAG,QAAA,gBAChCtB,OAAA;MAAKmB,SAAS,EAAC,kBAAkB;MAAAG,QAAA,eAC7BtB,OAAA;QAAImB,SAAS,EAAC,iBAAiB;QAAAG,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC,eAEN1B,OAAA;MAAGmB,SAAS,EAAC,iBAAiB;MAAAG,QAAA,EAAC;IAE/B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EAEHgB,WAAW,iBACR1C,OAAA;MAAKmB,SAAS,EAAC,yBAAyB;MAAAG,QAAA,eACpCtB,OAAA;QAAKmB,SAAS,EAAC,cAAc;QAAAG,QAAA,gBACzBtB,OAAA;UAAGmB,SAAS,EAAC,mBAAmB;UAAAG,QAAA,EAAC;QAAkC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACvE1B,OAAA;UAAQmB,SAAS,EAAC,kBAAkB;UAACC,OAAO,EAAEgF,YAAa;UAAA9E,QAAA,EAAC;QAE5D;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CACR,eAED1B,OAAA;MAAKmB,SAAS,EAAC,kBAAkB;MAAAG,QAAA,gBAC7BtB,OAAA;QAAImB,SAAS,EAAC,gBAAgB;QAAAG,QAAA,EAAC;MAAyB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAE7D1B,OAAA;QAAKmB,SAAS,EAAC,kBAAkB;QAAAG,QAAA,gBAC7BtB,OAAA;UAAKmB,SAAS,EAAC,YAAY;UAAAG,QAAA,gBACvBtB,OAAA;YAAMmB,SAAS,EAAC,aAAa;YAAAG,QAAA,EAAC;UAAE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACvC1B,OAAA;YACIsJ,IAAI,EAAC,MAAM;YACXC,WAAW,EAAC,uDAA8C;YAC1DxH,KAAK,EAAEc,UAAW;YAClB2G,QAAQ,EAAGxE,CAAC,IAAKyB,aAAa,CAACzB,CAAC,CAACyE,MAAM,CAAC1H,KAAK,CAAE;YAC/CZ,SAAS,EAAC;UAAc;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC3B,CAAC,EACDmB,UAAU,iBACP7C,OAAA;YACImB,SAAS,EAAC,cAAc;YACxBC,OAAO,EAAEA,CAAA,KAAMqF,aAAa,CAAC,EAAE,CAAE;YACjCpF,KAAK,EAAC,sBAAsB;YAAAC,QAAA,EAC/B;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CACX;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,eACN1B,OAAA;UAAKmB,SAAS,EAAC,cAAc;UAAAG,QAAA,eACzBtB,OAAA;YAAMmB,SAAS,EAAC,aAAa;YAAAG,QAAA,EAAC;UAA6B;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjE,CAAC,EACLmB,UAAU,iBACP7C,OAAA;UAAKmB,SAAS,EAAC,qBAAqB;UAAAG,QAAA,EAC/B6G,kBAAkB,CAAC9D,MAAM,KAAK,CAAC,GAC1B,wBAAwBxB,UAAU,GAAG,GACrC,GAAGsG,iBAAiB,CAAC,CAAC,6BAA6BhB,kBAAkB,CAAC9D,MAAM;QAAe;UAAA9C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEhG,CACR;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eAEN1B,OAAA;QACImB,SAAS,EAAC,sBAAsB;QAChCL,KAAK,EAAE;UACH4E,OAAO,EAAE,MAAM;UACfC,mBAAmB,EAAE,gBAAgB;UACrCC,GAAG,EAAE,MAAM;UACX8D,KAAK,EAAE,MAAM;UACbC,YAAY,EAAE,QAAQ;UAAE;UACxBC,gBAAgB,EAAE,MAAM;UAAE;UAC1BC,UAAU,EAAE;QAChB,CAAE;QAAAvI,QAAA,EAED6G,kBAAkB,CAAC3C,GAAG,CAACjD,QAAQ;UAAA,IAAAuH,qBAAA;UAAA,oBAC5B9J,OAAA,CAACsC,gBAAgB;YAEbC,QAAQ,EAAEA,QAAQ,CAACP,IAAK;YACxBQ,KAAK,EAAED,QAAQ,CAACC,KAAM;YACtBC,MAAM,GAAAqH,qBAAA,GAAEvD,cAAc,CAAChE,QAAQ,CAACP,IAAI,CAAC,cAAA8H,qBAAA,cAAAA,qBAAA,GAAI,KAAM;YAC/CpH,WAAW,EAAEA,WAAY;YACzBC,gBAAgB,EAAE8F,oBAAqB;YACvCtI,WAAW,EAAEyI,eAAgB;YAC7BhG,cAAc,EAAEiG,kBAAmB;YACnChG,UAAU,EAAEA,UAAW;YACvBC,WAAW,EAAE;UAAE,GATVP,QAAQ,CAACP,IAAI;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAUrB,CAAC;QAAA,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAC4E,GAAA,CA7MIN,eAAe;AAAA+D,GAAA,GAAf/D,eAAe;AA+MrB,eAAeA,eAAe;AAAC,IAAA/D,EAAA,EAAAI,GAAA,EAAA0D,GAAA,EAAAgE,GAAA;AAAAC,YAAA,CAAA/H,EAAA;AAAA+H,YAAA,CAAA3H,GAAA;AAAA2H,YAAA,CAAAjE,GAAA;AAAAiE,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}