{"ast":null,"code":"var _jsxFileName = \"D:\\\\CODE\\\\covalen-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport MenuHaut from './components/MenuHaut';\nimport MenuGaucheAdjointes from './components/MenuGaucheAdjointes';\nimport DetailTacheAdjointe from './components/DetailTacheAdjointe';\nimport PanneauAdmin from './components/PanneauAdmin';\nimport DashboardMaison from './components/DashboardMaison';\nimport Notification from './components/Notification';\nimport ConfirmationModale from './components/ConfirmationModale';\nimport { loadAppDataFromLocalStorage, saveAppDataToLocalStorage } from './utils/localStorage';\nimport { initialAppData } from './data/initialData';\n\n// Composant principal de l'application\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const LOCAL_STORAGE_KEY = 'covalenAppData';\n\n  // --- États de l'application ---\n  const [appData, setAppData] = useState(() => loadAppDataFromLocalStorage(LOCAL_STORAGE_KEY, initialAppData));\n  const [activeTab, setActiveTab] = useState('Maison');\n  const [activeTask, setActiveTask] = useState(null);\n  const [isAdminMode, setIsAdminMode] = useState(false);\n  const [notification, setNotification] = useState(null);\n  const [categoryStates, setCategoryStates] = useState({});\n  const [modalState, setModalState] = useState({\n    isOpen: false,\n    message: '',\n    onConfirm: () => {}\n  });\n\n  // --- Effets ---\n  // Sauvegarde les données dans localStorage à chaque modification\n  // useEffect(() => {\n  //     saveAppDataToLocalStorage(LOCAL_STORAGE_KEY, appData);\n  // }, [appData]);\n\n  // Gère la sélection de la tâche active lors du changement d'onglet\n  useEffect(() => {\n    if (activeTab !== 'Maison' && activeTab !== 'Admin') {\n      const tasks = appData[activeTab] || [];\n      if (tasks.length > 0) {\n        // Si la tâche active n'est plus dans la liste, on sélectionne la première\n        if (!activeTask || !tasks.some(t => t.id === activeTask.id)) {\n          setActiveTask(tasks[0]);\n        }\n      } else {\n        setActiveTask(null);\n      }\n    } else {\n      setActiveTask(null);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activeTab, appData]);\n\n  // --- Fonctions utilitaires ---\n  const showNotification = useCallback((message, type = 'info') => {\n    setNotification({\n      message,\n      type\n    });\n    setTimeout(() => setNotification(null), 3000);\n  }, []);\n\n  // --- Gestion des catégories (menu de gauche) ---\n  const handleToggleCategory = useCallback(category => {\n    setCategoryStates(prev => {\n      var _prev$category;\n      return {\n        ...prev,\n        [category]: {\n          ...prev[category],\n          isOpen: !((_prev$category = prev[category]) !== null && _prev$category !== void 0 && _prev$category.isOpen)\n        }\n      };\n    });\n  }, []);\n  const categorizedTasks = useMemo(() => {\n    const tasks = appData[activeTab] || [];\n    if (!Array.isArray(tasks)) return {};\n    return tasks.reduce((acc, task) => {\n      const category = task.category || 'Autres';\n      if (!acc[category]) {\n        var _categoryStates$categ, _categoryStates$categ2;\n        acc[category] = {\n          tasks: [],\n          isOpen: (_categoryStates$categ = (_categoryStates$categ2 = categoryStates[category]) === null || _categoryStates$categ2 === void 0 ? void 0 : _categoryStates$categ2.isOpen) !== null && _categoryStates$categ !== void 0 ? _categoryStates$categ : true\n        };\n      }\n      acc[category].tasks.push(task);\n      return acc;\n    }, {});\n  }, [appData, activeTab, categoryStates]);\n\n  // --- Gestion des onglets ---\n  const handleTabChange = tabName => {\n    setActiveTab(tabName);\n    if (tabName !== 'Admin') {\n      setIsAdminMode(false); // Quitter le mode admin en changeant d'onglet\n    }\n  };\n  const handleAdminPanel = () => {\n    setActiveTab('Admin');\n    setIsAdminMode(true);\n  };\n  const handleExitAdmin = useCallback(() => {\n    setActiveTab('Maison');\n    setIsAdminMode(false);\n  }, []);\n  const handleSaveData = useCallback(() => {\n    try {\n      saveAppDataToLocalStorage(LOCAL_STORAGE_KEY, appData);\n      showNotification('Données sauvegardées avec succès !', 'success');\n    } catch (error) {\n      showNotification('Erreur lors de la sauvegarde.', 'error');\n    }\n  }, [appData, showNotification]);\n  const handleAddTab = newTabName => {\n    if (!newTabName.trim()) {\n      showNotification('Le nom de l\\'onglet ne peut pas être vide.', 'error');\n      return;\n    }\n    setAppData(prev => {\n      if (prev[newTabName]) {\n        showNotification(`L'onglet '${newTabName}' existe déjà.`, 'error');\n        return prev;\n      }\n      showNotification(`Onglet '${newTabName}' ajouté.`, 'success');\n      return {\n        ...prev,\n        [newTabName]: []\n      };\n    });\n  };\n  const handleRenameTab = (oldTabName, newTabName) => {\n    if (!newTabName.trim()) {\n      showNotification('Le nouveau nom de l\\'onglet ne peut pas être vide.', 'error');\n      return;\n    }\n    setAppData(prev => {\n      if (prev[newTabName] && newTabName !== oldTabName) {\n        showNotification(`Le nom '${newTabName}' est déjà pris.`, 'error');\n        return prev;\n      }\n      const {\n        [oldTabName]: tabContent,\n        ...rest\n      } = prev;\n      const newAppData = {\n        ...rest,\n        [newTabName]: tabContent\n      };\n      if (activeTab === oldTabName) {\n        setActiveTab(newTabName);\n      }\n      showNotification(`Onglet '${oldTabName}' renommé en '${newTabName}'.`, 'success');\n      return newAppData;\n    });\n  };\n  const confirmDeleteTab = tabNameToDelete => {\n    setAppData(prev => {\n      const newData = {\n        ...prev\n      };\n      delete newData[tabNameToDelete];\n      return newData;\n    });\n    if (activeTab === tabNameToDelete) {\n      setActiveTab('Maison');\n    }\n    showNotification(`Onglet '${tabNameToDelete}' supprimé.`, 'success');\n    setModalState({\n      isOpen: false\n    });\n  };\n  const handleDeleteTab = tabNameToDelete => {\n    setModalState({\n      isOpen: true,\n      message: `Êtes-vous sûr de vouloir supprimer l'onglet \"${tabNameToDelete}\" et toutes ses tâches ?`,\n      onConfirm: () => confirmDeleteTab(tabNameToDelete)\n    });\n  };\n\n  // --- Gestion des tâches ---\n  const handleUpdateTask = updatedTask => {\n    setAppData(prev => ({\n      ...prev,\n      [activeTab]: (prev[activeTab] || []).map(task => task.id === updatedTask.id ? updatedTask : task)\n    }));\n  };\n  const handleAddTask = (targetTab, newTask) => {\n    setAppData(prev => ({\n      ...prev,\n      [targetTab]: [...(prev[targetTab] || []), newTask]\n    }));\n    setActiveTask(newTask);\n    setActiveTab(targetTab);\n    showNotification('Nouvelle tâche ajoutée !', 'success');\n  };\n  const confirmDeleteTask = taskId => {\n    let nextTask = null;\n    setAppData(prev => {\n      const tasks = prev[activeTab] || [];\n      const taskIndex = tasks.findIndex(t => t.id === taskId);\n      const updatedTasks = tasks.filter(t => t.id !== taskId);\n      if (updatedTasks.length > 0) {\n        // Sélectionne la tâche suivante, ou la précédente si c'était la dernière\n        nextTask = updatedTasks[taskIndex] || updatedTasks[taskIndex - 1] || updatedTasks[0];\n      }\n      return {\n        ...prev,\n        [activeTab]: updatedTasks\n      };\n    });\n    setActiveTask(nextTask);\n    showNotification('Tâche supprimée.', 'success');\n    setModalState({\n      isOpen: false\n    });\n  };\n  const handleDeleteTask = taskId => {\n    const taskToDelete = (appData[activeTab] || []).find(t => t.id === taskId);\n    if (taskToDelete) {\n      setModalState({\n        isOpen: true,\n        message: `Êtes-vous sûr de vouloir supprimer la tâche \"${taskToDelete.name}\" ?`,\n        onConfirm: () => confirmDeleteTask(taskId)\n      });\n    }\n  };\n\n  // --- Fonctions Drag & Drop ---\n  const handleMoveTask = useCallback((task, targetCategory) => {\n    // Trouver l'onglet qui contient la tâche\n    const sourceTab = task.tabName;\n    setAppData(prev => {\n      const updatedData = {\n        ...prev\n      };\n      const sourceTasks = [...(updatedData[sourceTab] || [])];\n\n      // Trouver et mettre à jour la tâche avec la nouvelle catégorie\n      const taskIndex = sourceTasks.findIndex(t => t.id === task.id);\n      if (taskIndex !== -1) {\n        sourceTasks[taskIndex] = {\n          ...sourceTasks[taskIndex],\n          category: targetCategory\n        };\n        updatedData[sourceTab] = sourceTasks;\n\n        // Mettre à jour la tâche active si c'est celle qui a été déplacée\n        if (activeTask && activeTask.id === task.id) {\n          setActiveTask(sourceTasks[taskIndex]);\n        }\n      }\n      return updatedData;\n    });\n    showNotification(`Tâche \"${task.name}\" déplacée vers la catégorie \"${targetCategory}\"`, 'success');\n  }, [activeTask, showNotification]);\n  const handleReorderCategories = useCallback((sourceCategory, targetCategory) => {\n    // Cette fonction pourrait être utilisée pour réorganiser l'ordre des catégories\n    // Pour l'instant, on peut l'implémenter plus tard si nécessaire\n    showNotification(`Fonctionnalité de réorganisation des catégories à implémenter`, 'info');\n  }, [showNotification]);\n  const handleReorderTasksInCategory = useCallback((category, sourceIndex, targetIndex) => {\n    // Fonction pour réorganiser l'ordre des tâches dans une catégorie\n    const reorderTasksInTab = (tasks, targetCategory, sIndex, tIndex) => {\n      const categoryTasks = tasks.filter(t => (t.category || 'Autres') === targetCategory);\n      if (categoryTasks.length <= 1 || sIndex === tIndex) {\n        return tasks; // Pas de changement nécessaire\n      }\n\n      // Réorganiser les tâches de cette catégorie\n      const reorderedTasks = [...categoryTasks];\n      const [removed] = reorderedTasks.splice(sIndex, 1);\n      reorderedTasks.splice(tIndex, 0, removed);\n\n      // Remettre les tâches réorganisées dans l'onglet\n      const otherTasks = tasks.filter(t => (t.category || 'Autres') !== targetCategory);\n      return [...otherTasks, ...reorderedTasks];\n    };\n    setAppData(prev => {\n      const updatedData = {\n        ...prev\n      };\n\n      // Appliquer la réorganisation à tous les onglets concernés\n      Object.keys(updatedData).forEach(tabName => {\n        if (tabName !== 'Maison' && tabName !== 'Admin') {\n          updatedData[tabName] = reorderTasksInTab(updatedData[tabName] || [], category, sourceIndex, targetIndex);\n        }\n      });\n      return updatedData;\n    });\n    showNotification(`Tâches réorganisées dans la catégorie \"${category}\"`, 'success');\n  }, [showNotification]);\n\n  // --- Raccourcis clavier ---\n  useEffect(() => {\n    const handleKeyPress = e => {\n      // Ctrl+S pour sauvegarder\n      if (e.ctrlKey && e.key === 's') {\n        e.preventDefault();\n        if (isAdminMode) {\n          handleSaveData();\n        }\n      }\n\n      // Ctrl+/ pour focus sur la recherche (dashboard)\n      if (e.ctrlKey && e.key === '/') {\n        e.preventDefault();\n        if (activeTab === 'Maison') {\n          const searchInput = document.querySelector('.search-input');\n          if (searchInput) {\n            searchInput.focus();\n            showNotification('Focus sur la recherche', 'info');\n          }\n        }\n      }\n\n      // Échap pour sortir du mode admin\n      if (e.key === 'Escape' && isAdminMode) {\n        handleExitAdmin();\n        showNotification('Mode admin quitté', 'info');\n      }\n    };\n    document.addEventListener('keydown', handleKeyPress);\n    return () => document.removeEventListener('keydown', handleKeyPress);\n  }, [isAdminMode, activeTab, handleSaveData, handleExitAdmin, showNotification]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-100 font-sans antialiased flex flex-col\",\n    children: [/*#__PURE__*/_jsxDEV(MenuHaut, {\n      tabs: Object.keys(appData),\n      activeTab: activeTab,\n      onTabClick: handleTabChange,\n      onAdminPanel: handleAdminPanel,\n      onExitAdmin: handleExitAdmin,\n      isAdminMode: isAdminMode,\n      onLogout: () => showNotification('Fonction de déconnexion à implémenter.', 'info')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"flex flex-1 p-6 max-w-screen-2xl mx-auto w-full overflow-hidden\",\n      children: [activeTab === 'Maison' && /*#__PURE__*/_jsxDEV(DashboardMaison, {\n        appData: appData,\n        onTabChange: handleTabChange,\n        onTaskSelect: setActiveTask,\n        onAdminPanel: handleAdminPanel,\n        isAdminMode: isAdminMode,\n        onMoveTask: handleMoveTask,\n        onReorderCategories: handleReorderCategories,\n        onReorderTasksInCategory: handleReorderTasksInCategory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 21\n      }, this), activeTab === 'Admin' && /*#__PURE__*/_jsxDEV(PanneauAdmin, {\n        appData: appData,\n        onAddTab: handleAddTab,\n        onAddTask: handleAddTask,\n        onRenameTab: handleRenameTab,\n        onDeleteTab: handleDeleteTab,\n        onSaveData: handleSaveData,\n        showNotification: showNotification\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 21\n      }, this), activeTab !== 'Admin' && activeTab !== 'Maison' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(MenuGaucheAdjointes, {\n          categories: categorizedTasks,\n          onSelectTask: setActiveTask,\n          selectedTask: activeTask,\n          onToggleCategory: handleToggleCategory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(DetailTacheAdjointe, {\n          task: activeTask,\n          onUpdateTask: handleUpdateTask,\n          onAdminModeToggle: setIsAdminMode,\n          isAdminMode: isAdminMode,\n          onDeleteTask: handleDeleteTask,\n          showNotification: showNotification\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {\n      message: notification === null || notification === void 0 ? void 0 : notification.message,\n      type: notification === null || notification === void 0 ? void 0 : notification.type,\n      onClose: () => setNotification(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ConfirmationModale, {\n      isOpen: modalState.isOpen,\n      message: modalState.message,\n      onConfirm: modalState.onConfirm,\n      onCancel: () => setModalState({\n        isOpen: false\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 323,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"esemZ/PbXL8dzDYUPjkFsZ5mlhw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useCallback","MenuHaut","MenuGaucheAdjointes","DetailTacheAdjointe","PanneauAdmin","DashboardMaison","Notification","ConfirmationModale","loadAppDataFromLocalStorage","saveAppDataToLocalStorage","initialAppData","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","LOCAL_STORAGE_KEY","appData","setAppData","activeTab","setActiveTab","activeTask","setActiveTask","isAdminMode","setIsAdminMode","notification","setNotification","categoryStates","setCategoryStates","modalState","setModalState","isOpen","message","onConfirm","tasks","length","some","t","id","showNotification","type","setTimeout","handleToggleCategory","category","prev","_prev$category","categorizedTasks","Array","isArray","reduce","acc","task","_categoryStates$categ","_categoryStates$categ2","push","handleTabChange","tabName","handleAdminPanel","handleExitAdmin","handleSaveData","error","handleAddTab","newTabName","trim","handleRenameTab","oldTabName","tabContent","rest","newAppData","confirmDeleteTab","tabNameToDelete","newData","handleDeleteTab","handleUpdateTask","updatedTask","map","handleAddTask","targetTab","newTask","confirmDeleteTask","taskId","nextTask","taskIndex","findIndex","updatedTasks","filter","handleDeleteTask","taskToDelete","find","name","handleMoveTask","targetCategory","sourceTab","updatedData","sourceTasks","handleReorderCategories","sourceCategory","handleReorderTasksInCategory","sourceIndex","targetIndex","reorderTasksInTab","sIndex","tIndex","categoryTasks","reorderedTasks","removed","splice","otherTasks","Object","keys","forEach","handleKeyPress","e","ctrlKey","key","preventDefault","searchInput","document","querySelector","focus","addEventListener","removeEventListener","className","children","tabs","onTabClick","onAdminPanel","onExitAdmin","onLogout","fileName","_jsxFileName","lineNumber","columnNumber","onTabChange","onTaskSelect","onMoveTask","onReorderCategories","onReorderTasksInCategory","onAddTab","onAddTask","onRenameTab","onDeleteTab","onSaveData","categories","onSelectTask","selectedTask","onToggleCategory","onUpdateTask","onAdminModeToggle","onDeleteTask","onClose","onCancel","_c","$RefreshReg$"],"sources":["D:/CODE/covalen-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport MenuHaut from './components/MenuHaut';\nimport MenuGaucheAdjointes from './components/MenuGaucheAdjointes';\nimport DetailTacheAdjointe from './components/DetailTacheAdjointe';\nimport PanneauAdmin from './components/PanneauAdmin';\nimport DashboardMaison from './components/DashboardMaison';\nimport Notification from './components/Notification';\nimport ConfirmationModale from './components/ConfirmationModale';\nimport { loadAppDataFromLocalStorage, saveAppDataToLocalStorage } from './utils/localStorage';\nimport { initialAppData } from './data/initialData';\n\n// Composant principal de l'application\nconst App = () => {\n    const LOCAL_STORAGE_KEY = 'covalenAppData';\n\n    // --- États de l'application ---\n    const [appData, setAppData] = useState(() => loadAppDataFromLocalStorage(LOCAL_STORAGE_KEY, initialAppData));\n    const [activeTab, setActiveTab] = useState('Maison');\n    const [activeTask, setActiveTask] = useState(null);\n    const [isAdminMode, setIsAdminMode] = useState(false);\n    const [notification, setNotification] = useState(null);\n    const [categoryStates, setCategoryStates] = useState({});\n    const [modalState, setModalState] = useState({ isOpen: false, message: '', onConfirm: () => { } });\n\n    // --- Effets ---\n    // Sauvegarde les données dans localStorage à chaque modification\n    // useEffect(() => {\n    //     saveAppDataToLocalStorage(LOCAL_STORAGE_KEY, appData);\n    // }, [appData]);\n\n    // Gère la sélection de la tâche active lors du changement d'onglet\n    useEffect(() => {\n        if (activeTab !== 'Maison' && activeTab !== 'Admin') {\n            const tasks = appData[activeTab] || [];\n            if (tasks.length > 0) {\n                // Si la tâche active n'est plus dans la liste, on sélectionne la première\n                if (!activeTask || !tasks.some(t => t.id === activeTask.id)) {\n                    setActiveTask(tasks[0]);\n                }\n            } else {\n                setActiveTask(null);\n            }\n        } else {\n            setActiveTask(null);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [activeTab, appData]);\n\n    // --- Fonctions utilitaires ---\n    const showNotification = useCallback((message, type = 'info') => {\n        setNotification({ message, type });\n        setTimeout(() => setNotification(null), 3000);\n    }, []);\n\n    // --- Gestion des catégories (menu de gauche) ---\n    const handleToggleCategory = useCallback((category) => {\n        setCategoryStates(prev => ({\n            ...prev,\n            [category]: { ...prev[category], isOpen: !prev[category]?.isOpen }\n        }));\n    }, []);\n\n    const categorizedTasks = useMemo(() => {\n        const tasks = appData[activeTab] || [];\n        if (!Array.isArray(tasks)) return {};\n\n        return tasks.reduce((acc, task) => {\n            const category = task.category || 'Autres';\n            if (!acc[category]) {\n                acc[category] = { tasks: [], isOpen: categoryStates[category]?.isOpen ?? true };\n            }\n            acc[category].tasks.push(task);\n            return acc;\n        }, {});\n    }, [appData, activeTab, categoryStates]);\n\n\n    // --- Gestion des onglets ---\n    const handleTabChange = (tabName) => {\n        setActiveTab(tabName);\n        if (tabName !== 'Admin') {\n            setIsAdminMode(false); // Quitter le mode admin en changeant d'onglet\n        }\n    };\n\n    const handleAdminPanel = () => {\n        setActiveTab('Admin');\n        setIsAdminMode(true);\n    };\n\n    const handleExitAdmin = useCallback(() => {\n        setActiveTab('Maison');\n        setIsAdminMode(false);\n    }, []);\n\n    const handleSaveData = useCallback(() => {\n        try {\n            saveAppDataToLocalStorage(LOCAL_STORAGE_KEY, appData);\n            showNotification('Données sauvegardées avec succès !', 'success');\n        } catch (error) {\n            showNotification('Erreur lors de la sauvegarde.', 'error');\n        }\n    }, [appData, showNotification]);\n\n    const handleAddTab = (newTabName) => {\n        if (!newTabName.trim()) {\n            showNotification('Le nom de l\\'onglet ne peut pas être vide.', 'error');\n            return;\n        }\n        setAppData(prev => {\n            if (prev[newTabName]) {\n                showNotification(`L'onglet '${newTabName}' existe déjà.`, 'error');\n                return prev;\n            }\n            showNotification(`Onglet '${newTabName}' ajouté.`, 'success');\n            return { ...prev, [newTabName]: [] };\n        });\n    };\n\n    const handleRenameTab = (oldTabName, newTabName) => {\n        if (!newTabName.trim()) {\n            showNotification('Le nouveau nom de l\\'onglet ne peut pas être vide.', 'error');\n            return;\n        }\n        setAppData(prev => {\n            if (prev[newTabName] && newTabName !== oldTabName) {\n                showNotification(`Le nom '${newTabName}' est déjà pris.`, 'error');\n                return prev;\n            }\n            const { [oldTabName]: tabContent, ...rest } = prev;\n            const newAppData = { ...rest, [newTabName]: tabContent };\n\n            if (activeTab === oldTabName) {\n                setActiveTab(newTabName);\n            }\n            showNotification(`Onglet '${oldTabName}' renommé en '${newTabName}'.`, 'success');\n            return newAppData;\n        });\n    };\n\n    const confirmDeleteTab = (tabNameToDelete) => {\n        setAppData(prev => {\n            const newData = { ...prev };\n            delete newData[tabNameToDelete];\n            return newData;\n        });\n        if (activeTab === tabNameToDelete) {\n            setActiveTab('Maison');\n        }\n        showNotification(`Onglet '${tabNameToDelete}' supprimé.`, 'success');\n        setModalState({ isOpen: false });\n    };\n\n    const handleDeleteTab = (tabNameToDelete) => {\n        setModalState({\n            isOpen: true,\n            message: `Êtes-vous sûr de vouloir supprimer l'onglet \"${tabNameToDelete}\" et toutes ses tâches ?`,\n            onConfirm: () => confirmDeleteTab(tabNameToDelete)\n        });\n    };\n\n    // --- Gestion des tâches ---\n    const handleUpdateTask = (updatedTask) => {\n        setAppData(prev => ({\n            ...prev,\n            [activeTab]: (prev[activeTab] || []).map(task =>\n                task.id === updatedTask.id ? updatedTask : task\n            )\n        }));\n    };\n\n    const handleAddTask = (targetTab, newTask) => {\n        setAppData(prev => ({\n            ...prev,\n            [targetTab]: [...(prev[targetTab] || []), newTask]\n        }));\n        setActiveTask(newTask);\n        setActiveTab(targetTab);\n        showNotification('Nouvelle tâche ajoutée !', 'success');\n    };\n\n    const confirmDeleteTask = (taskId) => {\n        let nextTask = null;\n        setAppData(prev => {\n            const tasks = prev[activeTab] || [];\n            const taskIndex = tasks.findIndex(t => t.id === taskId);\n            const updatedTasks = tasks.filter(t => t.id !== taskId);\n\n            if (updatedTasks.length > 0) {\n                // Sélectionne la tâche suivante, ou la précédente si c'était la dernière\n                nextTask = updatedTasks[taskIndex] || updatedTasks[taskIndex - 1] || updatedTasks[0];\n            }\n\n            return { ...prev, [activeTab]: updatedTasks };\n        });\n        setActiveTask(nextTask);\n        showNotification('Tâche supprimée.', 'success');\n        setModalState({ isOpen: false });\n    };\n\n    const handleDeleteTask = (taskId) => {\n        const taskToDelete = (appData[activeTab] || []).find(t => t.id === taskId);\n        if (taskToDelete) {\n            setModalState({\n                isOpen: true,\n                message: `Êtes-vous sûr de vouloir supprimer la tâche \"${taskToDelete.name}\" ?`,\n                onConfirm: () => confirmDeleteTask(taskId)\n            });\n        }\n    };\n\n    // --- Fonctions Drag & Drop ---\n    const handleMoveTask = useCallback((task, targetCategory) => {\n        // Trouver l'onglet qui contient la tâche\n        const sourceTab = task.tabName;\n        \n        setAppData(prev => {\n            const updatedData = { ...prev };\n            const sourceTasks = [...(updatedData[sourceTab] || [])];\n            \n            // Trouver et mettre à jour la tâche avec la nouvelle catégorie\n            const taskIndex = sourceTasks.findIndex(t => t.id === task.id);\n            if (taskIndex !== -1) {\n                sourceTasks[taskIndex] = {\n                    ...sourceTasks[taskIndex],\n                    category: targetCategory\n                };\n                updatedData[sourceTab] = sourceTasks;\n                \n                // Mettre à jour la tâche active si c'est celle qui a été déplacée\n                if (activeTask && activeTask.id === task.id) {\n                    setActiveTask(sourceTasks[taskIndex]);\n                }\n            }\n            \n            return updatedData;\n        });\n        \n        showNotification(`Tâche \"${task.name}\" déplacée vers la catégorie \"${targetCategory}\"`, 'success');\n    }, [activeTask, showNotification]);\n\n    const handleReorderCategories = useCallback((sourceCategory, targetCategory) => {\n        // Cette fonction pourrait être utilisée pour réorganiser l'ordre des catégories\n        // Pour l'instant, on peut l'implémenter plus tard si nécessaire\n        showNotification(`Fonctionnalité de réorganisation des catégories à implémenter`, 'info');\n    }, [showNotification]);\n\n    const handleReorderTasksInCategory = useCallback((category, sourceIndex, targetIndex) => {\n        // Fonction pour réorganiser l'ordre des tâches dans une catégorie\n        const reorderTasksInTab = (tasks, targetCategory, sIndex, tIndex) => {\n            const categoryTasks = tasks.filter(t => (t.category || 'Autres') === targetCategory);\n            \n            if (categoryTasks.length <= 1 || sIndex === tIndex) {\n                return tasks; // Pas de changement nécessaire\n            }\n            \n            // Réorganiser les tâches de cette catégorie\n            const reorderedTasks = [...categoryTasks];\n            const [removed] = reorderedTasks.splice(sIndex, 1);\n            reorderedTasks.splice(tIndex, 0, removed);\n            \n            // Remettre les tâches réorganisées dans l'onglet\n            const otherTasks = tasks.filter(t => (t.category || 'Autres') !== targetCategory);\n            return [...otherTasks, ...reorderedTasks];\n        };\n        \n        setAppData(prev => {\n            const updatedData = { ...prev };\n            \n            // Appliquer la réorganisation à tous les onglets concernés\n            Object.keys(updatedData).forEach(tabName => {\n                if (tabName !== 'Maison' && tabName !== 'Admin') {\n                    updatedData[tabName] = reorderTasksInTab(\n                        updatedData[tabName] || [], \n                        category, \n                        sourceIndex, \n                        targetIndex\n                    );\n                }\n            });\n            \n            return updatedData;\n        });\n        \n        showNotification(`Tâches réorganisées dans la catégorie \"${category}\"`, 'success');\n    }, [showNotification]);\n\n    // --- Raccourcis clavier ---\n    useEffect(() => {\n        const handleKeyPress = (e) => {\n            // Ctrl+S pour sauvegarder\n            if (e.ctrlKey && e.key === 's') {\n                e.preventDefault();\n                if (isAdminMode) {\n                    handleSaveData();\n                }\n            }\n            \n            // Ctrl+/ pour focus sur la recherche (dashboard)\n            if (e.ctrlKey && e.key === '/') {\n                e.preventDefault();\n                if (activeTab === 'Maison') {\n                    const searchInput = document.querySelector('.search-input');\n                    if (searchInput) {\n                        searchInput.focus();\n                        showNotification('Focus sur la recherche', 'info');\n                    }\n                }\n            }\n\n            // Échap pour sortir du mode admin\n            if (e.key === 'Escape' && isAdminMode) {\n                handleExitAdmin();\n                showNotification('Mode admin quitté', 'info');\n            }\n        };\n\n        document.addEventListener('keydown', handleKeyPress);\n        return () => document.removeEventListener('keydown', handleKeyPress);\n    }, [isAdminMode, activeTab, handleSaveData, handleExitAdmin, showNotification]);\n\n    return (\n        <div className=\"min-h-screen bg-gray-100 font-sans antialiased flex flex-col\">\n            <MenuHaut\n                tabs={Object.keys(appData)}\n                activeTab={activeTab}\n                onTabClick={handleTabChange}\n                onAdminPanel={handleAdminPanel}\n                onExitAdmin={handleExitAdmin}\n                isAdminMode={isAdminMode}\n                onLogout={() => showNotification('Fonction de déconnexion à implémenter.', 'info')}\n            />\n\n            <main className=\"flex flex-1 p-6 max-w-screen-2xl mx-auto w-full overflow-hidden\">\n                {activeTab === 'Maison' && (\n                    <DashboardMaison\n                        appData={appData}\n                        onTabChange={handleTabChange}\n                        onTaskSelect={setActiveTask}\n                        onAdminPanel={handleAdminPanel}\n                        isAdminMode={isAdminMode}\n                        onMoveTask={handleMoveTask}\n                        onReorderCategories={handleReorderCategories}\n                        onReorderTasksInCategory={handleReorderTasksInCategory}\n                    />\n                )}\n\n                {activeTab === 'Admin' && (\n                    <PanneauAdmin\n                        appData={appData}\n                        onAddTab={handleAddTab}\n                        onAddTask={handleAddTask}\n                        onRenameTab={handleRenameTab}\n                        onDeleteTab={handleDeleteTab}\n                        onSaveData={handleSaveData}\n                        showNotification={showNotification}\n                    />\n                )}\n\n                {activeTab !== 'Admin' && activeTab !== 'Maison' && (\n                    <>\n                        <MenuGaucheAdjointes\n                            categories={categorizedTasks}\n                            onSelectTask={setActiveTask}\n                            selectedTask={activeTask}\n                            onToggleCategory={handleToggleCategory}\n                        />\n                        <DetailTacheAdjointe\n                            task={activeTask}\n                            onUpdateTask={handleUpdateTask}\n                            onAdminModeToggle={setIsAdminMode}\n                            isAdminMode={isAdminMode}\n                            onDeleteTask={handleDeleteTask}\n                            showNotification={showNotification}\n                        />\n                    </>\n                )}\n            </main>\n\n            <Notification\n                message={notification?.message}\n                type={notification?.type}\n                onClose={() => setNotification(null)}\n            />\n\n            <ConfirmationModale\n                isOpen={modalState.isOpen}\n                message={modalState.message}\n                onConfirm={modalState.onConfirm}\n                onCancel={() => setModalState({ isOpen: false })}\n            />\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}