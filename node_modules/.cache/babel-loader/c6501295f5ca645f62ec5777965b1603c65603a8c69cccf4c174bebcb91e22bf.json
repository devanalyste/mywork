{"ast":null,"code":"var _jsxFileName = \"D:\\\\CODE\\\\covalen-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport MenuHaut from './components/MenuHaut';\nimport MenuGaucheAdjointes from './components/MenuGaucheAdjointes';\nimport DetailTacheAdjointe from './components/DetailTacheAdjointe';\nimport PanneauAdmin from './components/PanneauAdmin';\nimport DashboardMaison from './components/DashboardMaison';\nimport Notification from './components/Notification';\nimport ConfirmationModale from './components/ConfirmationModale';\nimport { loadAppDataFromLocalStorage, saveAppDataToLocalStorage } from './utils/localStorage';\nimport { initialAppData } from './data/initialData';\n\n// Composant principal de l'application\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const LOCAL_STORAGE_KEY = 'covalenAppData';\n\n  // --- États de l'application ---\n  const [appData, setAppData] = useState(() => loadAppDataFromLocalStorage(LOCAL_STORAGE_KEY, initialAppData));\n  const [activeTab, setActiveTab] = useState('Maison');\n  const [activeTask, setActiveTask] = useState(null);\n  const [isAdminMode, setIsAdminMode] = useState(false);\n  const [notification, setNotification] = useState(null);\n  const [categoryStates, setCategoryStates] = useState({});\n  const [modalState, setModalState] = useState({\n    isOpen: false,\n    message: '',\n    onConfirm: () => {}\n  });\n\n  // --- Effets ---\n  // Sauvegarde les données dans localStorage à chaque modification\n  useEffect(() => {\n    saveAppDataToLocalStorage(LOCAL_STORAGE_KEY, appData);\n  }, [appData]);\n\n  // Gère la sélection de la tâche active lors du changement d'onglet\n  useEffect(() => {\n    if (activeTab !== 'Maison' && activeTab !== 'Admin') {\n      const tasks = appData[activeTab] || [];\n      if (tasks.length > 0) {\n        // Si la tâche active n'est plus dans la liste, on sélectionne la première\n        if (!activeTask || !tasks.some(t => t.id === activeTask.id)) {\n          setActiveTask(tasks[0]);\n        }\n      } else {\n        setActiveTask(null);\n      }\n    } else {\n      setActiveTask(null);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activeTab, appData]);\n\n  // --- Fonctions utilitaires ---\n  const showNotification = useCallback((message, type = 'info') => {\n    setNotification({\n      message,\n      type\n    });\n    setTimeout(() => setNotification(null), 3000);\n  }, []);\n\n  // --- Gestion des catégories (menu de gauche) ---\n  const handleToggleCategory = useCallback(category => {\n    setCategoryStates(prev => {\n      var _prev$category;\n      return {\n        ...prev,\n        [category]: {\n          ...prev[category],\n          isOpen: !((_prev$category = prev[category]) !== null && _prev$category !== void 0 && _prev$category.isOpen)\n        }\n      };\n    });\n  }, []);\n  const categorizedTasks = useMemo(() => {\n    const tasks = appData[activeTab] || [];\n    if (!Array.isArray(tasks)) return {};\n    return tasks.reduce((acc, task) => {\n      const category = task.category || 'Autres';\n      if (!acc[category]) {\n        var _categoryStates$categ, _categoryStates$categ2;\n        acc[category] = {\n          tasks: [],\n          isOpen: (_categoryStates$categ = (_categoryStates$categ2 = categoryStates[category]) === null || _categoryStates$categ2 === void 0 ? void 0 : _categoryStates$categ2.isOpen) !== null && _categoryStates$categ !== void 0 ? _categoryStates$categ : true\n        };\n      }\n      acc[category].tasks.push(task);\n      return acc;\n    }, {});\n  }, [appData, activeTab, categoryStates]);\n\n  // --- Gestion des onglets ---\n  const handleTabChange = tabName => {\n    setActiveTab(tabName);\n    if (tabName !== 'Admin') {\n      setIsAdminMode(false); // Quitter le mode admin en changeant d'onglet\n    }\n  };\n  const handleAdminPanel = () => {\n    setActiveTab('Admin');\n    setIsAdminMode(true);\n  };\n  const handleExitAdmin = () => {\n    setActiveTab('Maison');\n    setIsAdminMode(false);\n  };\n  const handleAddTab = newTabName => {\n    if (!newTabName.trim()) {\n      showNotification('Le nom de l\\'onglet ne peut pas être vide.', 'error');\n      return;\n    }\n    setAppData(prev => {\n      if (prev[newTabName]) {\n        showNotification(`L'onglet '${newTabName}' existe déjà.`, 'error');\n        return prev;\n      }\n      showNotification(`Onglet '${newTabName}' ajouté.`, 'success');\n      return {\n        ...prev,\n        [newTabName]: []\n      };\n    });\n  };\n  const handleRenameTab = (oldTabName, newTabName) => {\n    if (!newTabName.trim()) {\n      showNotification('Le nouveau nom de l\\'onglet ne peut pas être vide.', 'error');\n      return;\n    }\n    setAppData(prev => {\n      if (prev[newTabName] && newTabName !== oldTabName) {\n        showNotification(`Le nom '${newTabName}' est déjà pris.`, 'error');\n        return prev;\n      }\n      const {\n        [oldTabName]: tabContent,\n        ...rest\n      } = prev;\n      const newAppData = {\n        ...rest,\n        [newTabName]: tabContent\n      };\n      if (activeTab === oldTabName) {\n        setActiveTab(newTabName);\n      }\n      showNotification(`Onglet '${oldTabName}' renommé en '${newTabName}'.`, 'success');\n      return newAppData;\n    });\n  };\n  const confirmDeleteTab = tabNameToDelete => {\n    setAppData(prev => {\n      const newData = {\n        ...prev\n      };\n      delete newData[tabNameToDelete];\n      return newData;\n    });\n    if (activeTab === tabNameToDelete) {\n      setActiveTab('Maison');\n    }\n    showNotification(`Onglet '${tabNameToDelete}' supprimé.`, 'success');\n    setModalState({\n      isOpen: false\n    });\n  };\n  const handleDeleteTab = tabNameToDelete => {\n    setModalState({\n      isOpen: true,\n      message: `Êtes-vous sûr de vouloir supprimer l'onglet \"${tabNameToDelete}\" et toutes ses tâches ?`,\n      onConfirm: () => confirmDeleteTab(tabNameToDelete)\n    });\n  };\n\n  // --- Gestion des tâches ---\n  const handleUpdateTask = updatedTask => {\n    setAppData(prev => ({\n      ...prev,\n      [activeTab]: (prev[activeTab] || []).map(task => task.id === updatedTask.id ? updatedTask : task)\n    }));\n  };\n  const handleAddTask = (targetTab, newTask) => {\n    setAppData(prev => ({\n      ...prev,\n      [targetTab]: [...(prev[targetTab] || []), newTask]\n    }));\n    setActiveTask(newTask);\n    setActiveTab(targetTab);\n    showNotification('Nouvelle tâche ajoutée !', 'success');\n  };\n  const confirmDeleteTask = taskId => {\n    let nextTask = null;\n    setAppData(prev => {\n      const tasks = prev[activeTab] || [];\n      const taskIndex = tasks.findIndex(t => t.id === taskId);\n      const updatedTasks = tasks.filter(t => t.id !== taskId);\n      if (updatedTasks.length > 0) {\n        // Sélectionne la tâche suivante, ou la précédente si c'était la dernière\n        nextTask = updatedTasks[taskIndex] || updatedTasks[taskIndex - 1] || updatedTasks[0];\n      }\n      return {\n        ...prev,\n        [activeTab]: updatedTasks\n      };\n    });\n    setActiveTask(nextTask);\n    showNotification('Tâche supprimée.', 'success');\n    setModalState({\n      isOpen: false\n    });\n  };\n  const handleDeleteTask = taskId => {\n    const taskToDelete = (appData[activeTab] || []).find(t => t.id === taskId);\n    if (taskToDelete) {\n      setModalState({\n        isOpen: true,\n        message: `Êtes-vous sûr de vouloir supprimer la tâche \"${taskToDelete.name}\" ?`,\n        onConfirm: () => confirmDeleteTask(taskId)\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-100 font-sans antialiased flex flex-col\",\n    children: [/*#__PURE__*/_jsxDEV(MenuHaut, {\n      tabs: Object.keys(appData),\n      activeTab: activeTab,\n      onTabClick: handleTabChange,\n      onAdminPanel: handleAdminPanel,\n      onExitAdmin: handleExitAdmin,\n      isAdminMode: isAdminMode,\n      onLogout: () => showNotification('Fonction de déconnexion à implémenter.', 'info')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"flex flex-1 p-6 max-w-screen-2xl mx-auto w-full overflow-hidden\",\n      children: [activeTab === 'Maison' && /*#__PURE__*/_jsxDEV(DashboardMaison, {\n        appData: appData,\n        onTabChange: handleTabChange,\n        onTaskSelect: setActiveTask,\n        onAdminPanel: handleAdminPanel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 21\n      }, this), activeTab === 'Admin' && /*#__PURE__*/_jsxDEV(PanneauAdmin, {\n        appData: appData,\n        onAddTab: handleAddTab,\n        onAddTask: handleAddTask,\n        onRenameTab: handleRenameTab,\n        onDeleteTab: handleDeleteTab,\n        showNotification: showNotification\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 21\n      }, this), activeTab !== 'Admin' && activeTab !== 'Maison' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(MenuGaucheAdjointes, {\n          categories: categorizedTasks,\n          onSelectTask: setActiveTask,\n          selectedTask: activeTask,\n          onToggleCategory: handleToggleCategory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(DetailTacheAdjointe, {\n          task: activeTask,\n          onUpdateTask: handleUpdateTask,\n          onAdminModeToggle: setIsAdminMode,\n          isAdminMode: isAdminMode,\n          onDeleteTask: handleDeleteTask,\n          showNotification: showNotification\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {\n      message: notification === null || notification === void 0 ? void 0 : notification.message,\n      type: notification === null || notification === void 0 ? void 0 : notification.type,\n      onClose: () => setNotification(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ConfirmationModale, {\n      isOpen: modalState.isOpen,\n      message: modalState.message,\n      onConfirm: modalState.onConfirm,\n      onCancel: () => setModalState({\n        isOpen: false\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"tMkfBHoGPHOz9hbu0mLLp8RnU5U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useCallback","MenuHaut","MenuGaucheAdjointes","DetailTacheAdjointe","PanneauAdmin","DashboardMaison","Notification","ConfirmationModale","loadAppDataFromLocalStorage","saveAppDataToLocalStorage","initialAppData","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","LOCAL_STORAGE_KEY","appData","setAppData","activeTab","setActiveTab","activeTask","setActiveTask","isAdminMode","setIsAdminMode","notification","setNotification","categoryStates","setCategoryStates","modalState","setModalState","isOpen","message","onConfirm","tasks","length","some","t","id","showNotification","type","setTimeout","handleToggleCategory","category","prev","_prev$category","categorizedTasks","Array","isArray","reduce","acc","task","_categoryStates$categ","_categoryStates$categ2","push","handleTabChange","tabName","handleAdminPanel","handleExitAdmin","handleAddTab","newTabName","trim","handleRenameTab","oldTabName","tabContent","rest","newAppData","confirmDeleteTab","tabNameToDelete","newData","handleDeleteTab","handleUpdateTask","updatedTask","map","handleAddTask","targetTab","newTask","confirmDeleteTask","taskId","nextTask","taskIndex","findIndex","updatedTasks","filter","handleDeleteTask","taskToDelete","find","name","className","children","tabs","Object","keys","onTabClick","onAdminPanel","onExitAdmin","onLogout","fileName","_jsxFileName","lineNumber","columnNumber","onTabChange","onTaskSelect","onAddTab","onAddTask","onRenameTab","onDeleteTab","categories","onSelectTask","selectedTask","onToggleCategory","onUpdateTask","onAdminModeToggle","onDeleteTask","onClose","onCancel","_c","$RefreshReg$"],"sources":["D:/CODE/covalen-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport MenuHaut from './components/MenuHaut';\nimport MenuGaucheAdjointes from './components/MenuGaucheAdjointes';\nimport DetailTacheAdjointe from './components/DetailTacheAdjointe';\nimport PanneauAdmin from './components/PanneauAdmin';\nimport DashboardMaison from './components/DashboardMaison';\nimport Notification from './components/Notification';\nimport ConfirmationModale from './components/ConfirmationModale';\nimport { loadAppDataFromLocalStorage, saveAppDataToLocalStorage } from './utils/localStorage';\nimport { initialAppData } from './data/initialData';\n\n// Composant principal de l'application\nconst App = () => {\n    const LOCAL_STORAGE_KEY = 'covalenAppData';\n\n    // --- États de l'application ---\n    const [appData, setAppData] = useState(() => loadAppDataFromLocalStorage(LOCAL_STORAGE_KEY, initialAppData));\n    const [activeTab, setActiveTab] = useState('Maison');\n    const [activeTask, setActiveTask] = useState(null);\n    const [isAdminMode, setIsAdminMode] = useState(false);\n    const [notification, setNotification] = useState(null);\n    const [categoryStates, setCategoryStates] = useState({});\n    const [modalState, setModalState] = useState({ isOpen: false, message: '', onConfirm: () => { } });\n\n    // --- Effets ---\n    // Sauvegarde les données dans localStorage à chaque modification\n    useEffect(() => {\n        saveAppDataToLocalStorage(LOCAL_STORAGE_KEY, appData);\n    }, [appData]);\n\n    // Gère la sélection de la tâche active lors du changement d'onglet\n    useEffect(() => {\n        if (activeTab !== 'Maison' && activeTab !== 'Admin') {\n            const tasks = appData[activeTab] || [];\n            if (tasks.length > 0) {\n                // Si la tâche active n'est plus dans la liste, on sélectionne la première\n                if (!activeTask || !tasks.some(t => t.id === activeTask.id)) {\n                    setActiveTask(tasks[0]);\n                }\n            } else {\n                setActiveTask(null);\n            }\n        } else {\n            setActiveTask(null);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [activeTab, appData]);\n\n    // --- Fonctions utilitaires ---\n    const showNotification = useCallback((message, type = 'info') => {\n        setNotification({ message, type });\n        setTimeout(() => setNotification(null), 3000);\n    }, []);\n\n    // --- Gestion des catégories (menu de gauche) ---\n    const handleToggleCategory = useCallback((category) => {\n        setCategoryStates(prev => ({\n            ...prev,\n            [category]: { ...prev[category], isOpen: !prev[category]?.isOpen }\n        }));\n    }, []);\n\n    const categorizedTasks = useMemo(() => {\n        const tasks = appData[activeTab] || [];\n        if (!Array.isArray(tasks)) return {};\n\n        return tasks.reduce((acc, task) => {\n            const category = task.category || 'Autres';\n            if (!acc[category]) {\n                acc[category] = { tasks: [], isOpen: categoryStates[category]?.isOpen ?? true };\n            }\n            acc[category].tasks.push(task);\n            return acc;\n        }, {});\n    }, [appData, activeTab, categoryStates]);\n\n\n    // --- Gestion des onglets ---\n    const handleTabChange = (tabName) => {\n        setActiveTab(tabName);\n        if (tabName !== 'Admin') {\n            setIsAdminMode(false); // Quitter le mode admin en changeant d'onglet\n        }\n    };\n\n    const handleAdminPanel = () => {\n        setActiveTab('Admin');\n        setIsAdminMode(true);\n    };\n\n    const handleExitAdmin = () => {\n        setActiveTab('Maison');\n        setIsAdminMode(false);\n    };\n\n    const handleAddTab = (newTabName) => {\n        if (!newTabName.trim()) {\n            showNotification('Le nom de l\\'onglet ne peut pas être vide.', 'error');\n            return;\n        }\n        setAppData(prev => {\n            if (prev[newTabName]) {\n                showNotification(`L'onglet '${newTabName}' existe déjà.`, 'error');\n                return prev;\n            }\n            showNotification(`Onglet '${newTabName}' ajouté.`, 'success');\n            return { ...prev, [newTabName]: [] };\n        });\n    };\n\n    const handleRenameTab = (oldTabName, newTabName) => {\n        if (!newTabName.trim()) {\n            showNotification('Le nouveau nom de l\\'onglet ne peut pas être vide.', 'error');\n            return;\n        }\n        setAppData(prev => {\n            if (prev[newTabName] && newTabName !== oldTabName) {\n                showNotification(`Le nom '${newTabName}' est déjà pris.`, 'error');\n                return prev;\n            }\n            const { [oldTabName]: tabContent, ...rest } = prev;\n            const newAppData = { ...rest, [newTabName]: tabContent };\n\n            if (activeTab === oldTabName) {\n                setActiveTab(newTabName);\n            }\n            showNotification(`Onglet '${oldTabName}' renommé en '${newTabName}'.`, 'success');\n            return newAppData;\n        });\n    };\n\n    const confirmDeleteTab = (tabNameToDelete) => {\n        setAppData(prev => {\n            const newData = { ...prev };\n            delete newData[tabNameToDelete];\n            return newData;\n        });\n        if (activeTab === tabNameToDelete) {\n            setActiveTab('Maison');\n        }\n        showNotification(`Onglet '${tabNameToDelete}' supprimé.`, 'success');\n        setModalState({ isOpen: false });\n    };\n\n    const handleDeleteTab = (tabNameToDelete) => {\n        setModalState({\n            isOpen: true,\n            message: `Êtes-vous sûr de vouloir supprimer l'onglet \"${tabNameToDelete}\" et toutes ses tâches ?`,\n            onConfirm: () => confirmDeleteTab(tabNameToDelete)\n        });\n    };\n\n    // --- Gestion des tâches ---\n    const handleUpdateTask = (updatedTask) => {\n        setAppData(prev => ({\n            ...prev,\n            [activeTab]: (prev[activeTab] || []).map(task =>\n                task.id === updatedTask.id ? updatedTask : task\n            )\n        }));\n    };\n\n    const handleAddTask = (targetTab, newTask) => {\n        setAppData(prev => ({\n            ...prev,\n            [targetTab]: [...(prev[targetTab] || []), newTask]\n        }));\n        setActiveTask(newTask);\n        setActiveTab(targetTab);\n        showNotification('Nouvelle tâche ajoutée !', 'success');\n    };\n\n    const confirmDeleteTask = (taskId) => {\n        let nextTask = null;\n        setAppData(prev => {\n            const tasks = prev[activeTab] || [];\n            const taskIndex = tasks.findIndex(t => t.id === taskId);\n            const updatedTasks = tasks.filter(t => t.id !== taskId);\n\n            if (updatedTasks.length > 0) {\n                // Sélectionne la tâche suivante, ou la précédente si c'était la dernière\n                nextTask = updatedTasks[taskIndex] || updatedTasks[taskIndex - 1] || updatedTasks[0];\n            }\n\n            return { ...prev, [activeTab]: updatedTasks };\n        });\n        setActiveTask(nextTask);\n        showNotification('Tâche supprimée.', 'success');\n        setModalState({ isOpen: false });\n    };\n\n    const handleDeleteTask = (taskId) => {\n        const taskToDelete = (appData[activeTab] || []).find(t => t.id === taskId);\n        if (taskToDelete) {\n            setModalState({\n                isOpen: true,\n                message: `Êtes-vous sûr de vouloir supprimer la tâche \"${taskToDelete.name}\" ?`,\n                onConfirm: () => confirmDeleteTask(taskId)\n            });\n        }\n    };\n\n    return (\n        <div className=\"min-h-screen bg-gray-100 font-sans antialiased flex flex-col\">\n            <MenuHaut\n                tabs={Object.keys(appData)}\n                activeTab={activeTab}\n                onTabClick={handleTabChange}\n                onAdminPanel={handleAdminPanel}\n                onExitAdmin={handleExitAdmin}\n                isAdminMode={isAdminMode}\n                onLogout={() => showNotification('Fonction de déconnexion à implémenter.', 'info')}\n            />\n\n            <main className=\"flex flex-1 p-6 max-w-screen-2xl mx-auto w-full overflow-hidden\">\n                {activeTab === 'Maison' && (\n                    <DashboardMaison\n                        appData={appData}\n                        onTabChange={handleTabChange}\n                        onTaskSelect={setActiveTask}\n                        onAdminPanel={handleAdminPanel}\n                    />\n                )}\n\n                {activeTab === 'Admin' && (\n                    <PanneauAdmin\n                        appData={appData}\n                        onAddTab={handleAddTab}\n                        onAddTask={handleAddTask}\n                        onRenameTab={handleRenameTab}\n                        onDeleteTab={handleDeleteTab}\n                        showNotification={showNotification}\n                    />\n                )}\n\n                {activeTab !== 'Admin' && activeTab !== 'Maison' && (\n                    <>\n                        <MenuGaucheAdjointes\n                            categories={categorizedTasks}\n                            onSelectTask={setActiveTask}\n                            selectedTask={activeTask}\n                            onToggleCategory={handleToggleCategory}\n                        />\n                        <DetailTacheAdjointe\n                            task={activeTask}\n                            onUpdateTask={handleUpdateTask}\n                            onAdminModeToggle={setIsAdminMode}\n                            isAdminMode={isAdminMode}\n                            onDeleteTask={handleDeleteTask}\n                            showNotification={showNotification}\n                        />\n                    </>\n                )}\n            </main>\n\n            <Notification\n                message={notification?.message}\n                type={notification?.type}\n                onClose={() => setNotification(null)}\n            />\n\n            <ConfirmationModale\n                isOpen={modalState.isOpen}\n                message={modalState.message}\n                onConfirm={modalState.onConfirm}\n                onCancel={() => setModalState({ isOpen: false })}\n            />\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,EAAEC,WAAW,QAAQ,OAAO;AACxE,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,mBAAmB,MAAM,kCAAkC;AAClE,OAAOC,mBAAmB,MAAM,kCAAkC;AAClE,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,eAAe,MAAM,8BAA8B;AAC1D,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,kBAAkB,MAAM,iCAAiC;AAChE,SAASC,2BAA2B,EAAEC,yBAAyB,QAAQ,sBAAsB;AAC7F,SAASC,cAAc,QAAQ,oBAAoB;;AAEnD;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACd,MAAMC,iBAAiB,GAAG,gBAAgB;;EAE1C;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGtB,QAAQ,CAAC,MAAMW,2BAA2B,CAACS,iBAAiB,EAAEP,cAAc,CAAC,CAAC;EAC5G,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGxB,QAAQ,CAAC,QAAQ,CAAC;EACpD,MAAM,CAACyB,UAAU,EAAEC,aAAa,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAAC2B,WAAW,EAAEC,cAAc,CAAC,GAAG5B,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAAC6B,YAAY,EAAEC,eAAe,CAAC,GAAG9B,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAAC+B,cAAc,EAAEC,iBAAiB,CAAC,GAAGhC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxD,MAAM,CAACiC,UAAU,EAAEC,aAAa,CAAC,GAAGlC,QAAQ,CAAC;IAAEmC,MAAM,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,SAAS,EAAEA,CAAA,KAAM,CAAE;EAAE,CAAC,CAAC;;EAElG;EACA;EACApC,SAAS,CAAC,MAAM;IACZW,yBAAyB,CAACQ,iBAAiB,EAAEC,OAAO,CAAC;EACzD,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;;EAEb;EACApB,SAAS,CAAC,MAAM;IACZ,IAAIsB,SAAS,KAAK,QAAQ,IAAIA,SAAS,KAAK,OAAO,EAAE;MACjD,MAAMe,KAAK,GAAGjB,OAAO,CAACE,SAAS,CAAC,IAAI,EAAE;MACtC,IAAIe,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;QAClB;QACA,IAAI,CAACd,UAAU,IAAI,CAACa,KAAK,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKjB,UAAU,CAACiB,EAAE,CAAC,EAAE;UACzDhB,aAAa,CAACY,KAAK,CAAC,CAAC,CAAC,CAAC;QAC3B;MACJ,CAAC,MAAM;QACHZ,aAAa,CAAC,IAAI,CAAC;MACvB;IACJ,CAAC,MAAM;MACHA,aAAa,CAAC,IAAI,CAAC;IACvB;IACA;EACJ,CAAC,EAAE,CAACH,SAAS,EAAEF,OAAO,CAAC,CAAC;;EAExB;EACA,MAAMsB,gBAAgB,GAAGxC,WAAW,CAAC,CAACiC,OAAO,EAAEQ,IAAI,GAAG,MAAM,KAAK;IAC7Dd,eAAe,CAAC;MAAEM,OAAO;MAAEQ;IAAK,CAAC,CAAC;IAClCC,UAAU,CAAC,MAAMf,eAAe,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;EACjD,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMgB,oBAAoB,GAAG3C,WAAW,CAAE4C,QAAQ,IAAK;IACnDf,iBAAiB,CAACgB,IAAI;MAAA,IAAAC,cAAA;MAAA,OAAK;QACvB,GAAGD,IAAI;QACP,CAACD,QAAQ,GAAG;UAAE,GAAGC,IAAI,CAACD,QAAQ,CAAC;UAAEZ,MAAM,EAAE,GAAAc,cAAA,GAACD,IAAI,CAACD,QAAQ,CAAC,cAAAE,cAAA,eAAdA,cAAA,CAAgBd,MAAM;QAAC;MACrE,CAAC;IAAA,CAAC,CAAC;EACP,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMe,gBAAgB,GAAGhD,OAAO,CAAC,MAAM;IACnC,MAAMoC,KAAK,GAAGjB,OAAO,CAACE,SAAS,CAAC,IAAI,EAAE;IACtC,IAAI,CAAC4B,KAAK,CAACC,OAAO,CAACd,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC;IAEpC,OAAOA,KAAK,CAACe,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAK;MAC/B,MAAMR,QAAQ,GAAGQ,IAAI,CAACR,QAAQ,IAAI,QAAQ;MAC1C,IAAI,CAACO,GAAG,CAACP,QAAQ,CAAC,EAAE;QAAA,IAAAS,qBAAA,EAAAC,sBAAA;QAChBH,GAAG,CAACP,QAAQ,CAAC,GAAG;UAAET,KAAK,EAAE,EAAE;UAAEH,MAAM,GAAAqB,qBAAA,IAAAC,sBAAA,GAAE1B,cAAc,CAACgB,QAAQ,CAAC,cAAAU,sBAAA,uBAAxBA,sBAAA,CAA0BtB,MAAM,cAAAqB,qBAAA,cAAAA,qBAAA,GAAI;QAAK,CAAC;MACnF;MACAF,GAAG,CAACP,QAAQ,CAAC,CAACT,KAAK,CAACoB,IAAI,CAACH,IAAI,CAAC;MAC9B,OAAOD,GAAG;IACd,CAAC,EAAE,CAAC,CAAC,CAAC;EACV,CAAC,EAAE,CAACjC,OAAO,EAAEE,SAAS,EAAEQ,cAAc,CAAC,CAAC;;EAGxC;EACA,MAAM4B,eAAe,GAAIC,OAAO,IAAK;IACjCpC,YAAY,CAACoC,OAAO,CAAC;IACrB,IAAIA,OAAO,KAAK,OAAO,EAAE;MACrBhC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;IAC3B;EACJ,CAAC;EAED,MAAMiC,gBAAgB,GAAGA,CAAA,KAAM;IAC3BrC,YAAY,CAAC,OAAO,CAAC;IACrBI,cAAc,CAAC,IAAI,CAAC;EACxB,CAAC;EAED,MAAMkC,eAAe,GAAGA,CAAA,KAAM;IAC1BtC,YAAY,CAAC,QAAQ,CAAC;IACtBI,cAAc,CAAC,KAAK,CAAC;EACzB,CAAC;EAED,MAAMmC,YAAY,GAAIC,UAAU,IAAK;IACjC,IAAI,CAACA,UAAU,CAACC,IAAI,CAAC,CAAC,EAAE;MACpBtB,gBAAgB,CAAC,4CAA4C,EAAE,OAAO,CAAC;MACvE;IACJ;IACArB,UAAU,CAAC0B,IAAI,IAAI;MACf,IAAIA,IAAI,CAACgB,UAAU,CAAC,EAAE;QAClBrB,gBAAgB,CAAC,aAAaqB,UAAU,gBAAgB,EAAE,OAAO,CAAC;QAClE,OAAOhB,IAAI;MACf;MACAL,gBAAgB,CAAC,WAAWqB,UAAU,WAAW,EAAE,SAAS,CAAC;MAC7D,OAAO;QAAE,GAAGhB,IAAI;QAAE,CAACgB,UAAU,GAAG;MAAG,CAAC;IACxC,CAAC,CAAC;EACN,CAAC;EAED,MAAME,eAAe,GAAGA,CAACC,UAAU,EAAEH,UAAU,KAAK;IAChD,IAAI,CAACA,UAAU,CAACC,IAAI,CAAC,CAAC,EAAE;MACpBtB,gBAAgB,CAAC,oDAAoD,EAAE,OAAO,CAAC;MAC/E;IACJ;IACArB,UAAU,CAAC0B,IAAI,IAAI;MACf,IAAIA,IAAI,CAACgB,UAAU,CAAC,IAAIA,UAAU,KAAKG,UAAU,EAAE;QAC/CxB,gBAAgB,CAAC,WAAWqB,UAAU,kBAAkB,EAAE,OAAO,CAAC;QAClE,OAAOhB,IAAI;MACf;MACA,MAAM;QAAE,CAACmB,UAAU,GAAGC,UAAU;QAAE,GAAGC;MAAK,CAAC,GAAGrB,IAAI;MAClD,MAAMsB,UAAU,GAAG;QAAE,GAAGD,IAAI;QAAE,CAACL,UAAU,GAAGI;MAAW,CAAC;MAExD,IAAI7C,SAAS,KAAK4C,UAAU,EAAE;QAC1B3C,YAAY,CAACwC,UAAU,CAAC;MAC5B;MACArB,gBAAgB,CAAC,WAAWwB,UAAU,iBAAiBH,UAAU,IAAI,EAAE,SAAS,CAAC;MACjF,OAAOM,UAAU;IACrB,CAAC,CAAC;EACN,CAAC;EAED,MAAMC,gBAAgB,GAAIC,eAAe,IAAK;IAC1ClD,UAAU,CAAC0B,IAAI,IAAI;MACf,MAAMyB,OAAO,GAAG;QAAE,GAAGzB;MAAK,CAAC;MAC3B,OAAOyB,OAAO,CAACD,eAAe,CAAC;MAC/B,OAAOC,OAAO;IAClB,CAAC,CAAC;IACF,IAAIlD,SAAS,KAAKiD,eAAe,EAAE;MAC/BhD,YAAY,CAAC,QAAQ,CAAC;IAC1B;IACAmB,gBAAgB,CAAC,WAAW6B,eAAe,aAAa,EAAE,SAAS,CAAC;IACpEtC,aAAa,CAAC;MAAEC,MAAM,EAAE;IAAM,CAAC,CAAC;EACpC,CAAC;EAED,MAAMuC,eAAe,GAAIF,eAAe,IAAK;IACzCtC,aAAa,CAAC;MACVC,MAAM,EAAE,IAAI;MACZC,OAAO,EAAE,gDAAgDoC,eAAe,0BAA0B;MAClGnC,SAAS,EAAEA,CAAA,KAAMkC,gBAAgB,CAACC,eAAe;IACrD,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAMG,gBAAgB,GAAIC,WAAW,IAAK;IACtCtD,UAAU,CAAC0B,IAAI,KAAK;MAChB,GAAGA,IAAI;MACP,CAACzB,SAAS,GAAG,CAACyB,IAAI,CAACzB,SAAS,CAAC,IAAI,EAAE,EAAEsD,GAAG,CAACtB,IAAI,IACzCA,IAAI,CAACb,EAAE,KAAKkC,WAAW,CAAClC,EAAE,GAAGkC,WAAW,GAAGrB,IAC/C;IACJ,CAAC,CAAC,CAAC;EACP,CAAC;EAED,MAAMuB,aAAa,GAAGA,CAACC,SAAS,EAAEC,OAAO,KAAK;IAC1C1D,UAAU,CAAC0B,IAAI,KAAK;MAChB,GAAGA,IAAI;MACP,CAAC+B,SAAS,GAAG,CAAC,IAAI/B,IAAI,CAAC+B,SAAS,CAAC,IAAI,EAAE,CAAC,EAAEC,OAAO;IACrD,CAAC,CAAC,CAAC;IACHtD,aAAa,CAACsD,OAAO,CAAC;IACtBxD,YAAY,CAACuD,SAAS,CAAC;IACvBpC,gBAAgB,CAAC,0BAA0B,EAAE,SAAS,CAAC;EAC3D,CAAC;EAED,MAAMsC,iBAAiB,GAAIC,MAAM,IAAK;IAClC,IAAIC,QAAQ,GAAG,IAAI;IACnB7D,UAAU,CAAC0B,IAAI,IAAI;MACf,MAAMV,KAAK,GAAGU,IAAI,CAACzB,SAAS,CAAC,IAAI,EAAE;MACnC,MAAM6D,SAAS,GAAG9C,KAAK,CAAC+C,SAAS,CAAC5C,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKwC,MAAM,CAAC;MACvD,MAAMI,YAAY,GAAGhD,KAAK,CAACiD,MAAM,CAAC9C,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKwC,MAAM,CAAC;MAEvD,IAAII,YAAY,CAAC/C,MAAM,GAAG,CAAC,EAAE;QACzB;QACA4C,QAAQ,GAAGG,YAAY,CAACF,SAAS,CAAC,IAAIE,YAAY,CAACF,SAAS,GAAG,CAAC,CAAC,IAAIE,YAAY,CAAC,CAAC,CAAC;MACxF;MAEA,OAAO;QAAE,GAAGtC,IAAI;QAAE,CAACzB,SAAS,GAAG+D;MAAa,CAAC;IACjD,CAAC,CAAC;IACF5D,aAAa,CAACyD,QAAQ,CAAC;IACvBxC,gBAAgB,CAAC,kBAAkB,EAAE,SAAS,CAAC;IAC/CT,aAAa,CAAC;MAAEC,MAAM,EAAE;IAAM,CAAC,CAAC;EACpC,CAAC;EAED,MAAMqD,gBAAgB,GAAIN,MAAM,IAAK;IACjC,MAAMO,YAAY,GAAG,CAACpE,OAAO,CAACE,SAAS,CAAC,IAAI,EAAE,EAAEmE,IAAI,CAACjD,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKwC,MAAM,CAAC;IAC1E,IAAIO,YAAY,EAAE;MACdvD,aAAa,CAAC;QACVC,MAAM,EAAE,IAAI;QACZC,OAAO,EAAE,gDAAgDqD,YAAY,CAACE,IAAI,KAAK;QAC/EtD,SAAS,EAAEA,CAAA,KAAM4C,iBAAiB,CAACC,MAAM;MAC7C,CAAC,CAAC;IACN;EACJ,CAAC;EAED,oBACInE,OAAA;IAAK6E,SAAS,EAAC,8DAA8D;IAAAC,QAAA,gBACzE9E,OAAA,CAACX,QAAQ;MACL0F,IAAI,EAAEC,MAAM,CAACC,IAAI,CAAC3E,OAAO,CAAE;MAC3BE,SAAS,EAAEA,SAAU;MACrB0E,UAAU,EAAEtC,eAAgB;MAC5BuC,YAAY,EAAErC,gBAAiB;MAC/BsC,WAAW,EAAErC,eAAgB;MAC7BnC,WAAW,EAAEA,WAAY;MACzByE,QAAQ,EAAEA,CAAA,KAAMzD,gBAAgB,CAAC,wCAAwC,EAAE,MAAM;IAAE;MAAA0D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtF,CAAC,eAEFzF,OAAA;MAAM6E,SAAS,EAAC,iEAAiE;MAAAC,QAAA,GAC5EtE,SAAS,KAAK,QAAQ,iBACnBR,OAAA,CAACP,eAAe;QACZa,OAAO,EAAEA,OAAQ;QACjBoF,WAAW,EAAE9C,eAAgB;QAC7B+C,YAAY,EAAEhF,aAAc;QAC5BwE,YAAY,EAAErC;MAAiB;QAAAwC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC,CACJ,EAEAjF,SAAS,KAAK,OAAO,iBAClBR,OAAA,CAACR,YAAY;QACTc,OAAO,EAAEA,OAAQ;QACjBsF,QAAQ,EAAE5C,YAAa;QACvB6C,SAAS,EAAE9B,aAAc;QACzB+B,WAAW,EAAE3C,eAAgB;QAC7B4C,WAAW,EAAEpC,eAAgB;QAC7B/B,gBAAgB,EAAEA;MAAiB;QAAA0D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtC,CACJ,EAEAjF,SAAS,KAAK,OAAO,IAAIA,SAAS,KAAK,QAAQ,iBAC5CR,OAAA,CAAAE,SAAA;QAAA4E,QAAA,gBACI9E,OAAA,CAACV,mBAAmB;UAChB0G,UAAU,EAAE7D,gBAAiB;UAC7B8D,YAAY,EAAEtF,aAAc;UAC5BuF,YAAY,EAAExF,UAAW;UACzByF,gBAAgB,EAAEpE;QAAqB;UAAAuD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1C,CAAC,eACFzF,OAAA,CAACT,mBAAmB;UAChBiD,IAAI,EAAE9B,UAAW;UACjB0F,YAAY,EAAExC,gBAAiB;UAC/ByC,iBAAiB,EAAExF,cAAe;UAClCD,WAAW,EAAEA,WAAY;UACzB0F,YAAY,EAAE7B,gBAAiB;UAC/B7C,gBAAgB,EAAEA;QAAiB;UAAA0D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtC,CAAC;MAAA,eACJ,CACL;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAEPzF,OAAA,CAACN,YAAY;MACT2B,OAAO,EAAEP,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEO,OAAQ;MAC/BQ,IAAI,EAAEf,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEe,IAAK;MACzB0E,OAAO,EAAEA,CAAA,KAAMxF,eAAe,CAAC,IAAI;IAAE;MAAAuE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC,eAEFzF,OAAA,CAACL,kBAAkB;MACfyB,MAAM,EAAEF,UAAU,CAACE,MAAO;MAC1BC,OAAO,EAAEH,UAAU,CAACG,OAAQ;MAC5BC,SAAS,EAAEJ,UAAU,CAACI,SAAU;MAChCkF,QAAQ,EAAEA,CAAA,KAAMrF,aAAa,CAAC;QAAEC,MAAM,EAAE;MAAM,CAAC;IAAE;MAAAkE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACrF,EAAA,CAjQID,GAAG;AAAAsG,EAAA,GAAHtG,GAAG;AAmQT,eAAeA,GAAG;AAAC,IAAAsG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}