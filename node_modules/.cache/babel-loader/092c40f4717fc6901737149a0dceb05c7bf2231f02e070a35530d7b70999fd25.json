{"ast":null,"code":"// DonnÃ©es de test avec BEAUCOUP de tÃ¢ches pour stress-test le layout grille 4 colonnes\nexport const massiveTestAppData={Maison:{},// L'onglet Maison n'aura pas de tÃ¢ches directement\nAdjointes:[]};// Fonction pour gÃ©nÃ©rer des tÃ¢ches alÃ©atoirement\nconst generateRandomTasks=()=>{const categories=['Annulations','RÃ©clamations','Validations','Correspondances','Expertises','Sinistres','Contrats','Clients','Facturations','Juridique','Techniques','Archives'];const taskPrefixes=['Traitement','Validation','VÃ©rification','ContrÃ´le','Analyse','Suivi','Gestion','RÃ©vision','Expertise','Inspection','Ã‰valuation','Approbation','Archivage','Transmission','Notification'];const taskSuffixes=['urgent','standard','prioritaire','diffÃ©rÃ©','spÃ©cial','mensuel','hebdomadaire','quotidien','annuel','trimestriel','automatique','manuel','numÃ©rique','papier','Ã©lectronique'];const tasks=[];let taskId=1;// GÃ©nÃ©rer 15-25 tÃ¢ches par catÃ©gorie (total: ~240 tÃ¢ches)\ncategories.forEach(category=>{const tasksInCategory=Math.floor(Math.random()*11)+15;// 15-25 tÃ¢ches\nfor(let i=0;i<tasksInCategory;i++){const prefix=taskPrefixes[Math.floor(Math.random()*taskPrefixes.length)];const suffix=taskSuffixes[Math.floor(Math.random()*taskSuffixes.length)];const modelNumber=Math.floor(Math.random()*900)+100;// 100-999\nconst task={id:taskId.toString(),name:\"\".concat(prefix,\" \").concat(suffix,\" \").concat(category.toLowerCase()),category:category,fields:[{key:'modelNumber',label:'NumÃ©ro de ModÃ¨le/Lettre',type:'text',value:modelNumber.toString(),adminOnlyEdit:true},{key:'fullTemplateName',label:'ModÃ¨le de lettre',type:'text',value:\"\".concat(prefix,\" \").concat(suffix,\" - Mod\\xE8le \").concat(modelNumber),adminOnlyEdit:true,copyable:true},{key:'attachmentName',label:'Nom de PiÃ¨ce Jointe',type:'text',value:\"2025-06-26 \".concat(category,\" - \").concat(prefix,\" \").concat(modelNumber),adminOnlyEdit:false,copyable:true}]};// Ajouter des champs supplÃ©mentaires alÃ©atoirement\nif(Math.random()>0.5){task.fields.push({key:'noteTemplate',label:'Note EPIC',type:'textarea',value:\"\".concat(category,\" - \").concat(prefix,\" \").concat(modelNumber,\" + documentation\"),adminOnlyEdit:false,copyable:true,specialButton:'addDate'});}if(Math.random()>0.7){task.fields.push({key:'procedure',label:'ProcÃ©dure Ã  Suivre',type:'textarea',value:\"1. Analyser le dossier \".concat(category.toLowerCase(),\".\\\\n2. Appliquer la proc\\xE9dure \").concat(modelNumber,\".\\\\n3. Archiver le r\\xE9sultat.\"),adminOnlyEdit:true,hasCheckboxes:Math.random()>0.5});}tasks.push(task);taskId++;}});return tasks;};// GÃ©nÃ©rer les tÃ¢ches\nmassiveTestAppData.Adjointes=generateRandomTasks();console.log(\"\\uD83E\\uDDEA Donn\\xE9es de test g\\xE9n\\xE9r\\xE9es: \".concat(massiveTestAppData.Adjointes.length,\" t\\xE2ches r\\xE9parties sur \").concat(new Set(massiveTestAppData.Adjointes.map(t=>t.category)).size,\" cat\\xE9gories\"));// Stats par catÃ©gorie\nconst categoryStats={};massiveTestAppData.Adjointes.forEach(task=>{categoryStats[task.category]=(categoryStats[task.category]||0)+1;});console.log('ðŸ“Š RÃ©partition par catÃ©gorie:',categoryStats);","map":{"version":3,"names":["massiveTestAppData","Maison","Adjointes","generateRandomTasks","categories","taskPrefixes","taskSuffixes","tasks","taskId","forEach","category","tasksInCategory","Math","floor","random","i","prefix","length","suffix","modelNumber","task","id","toString","name","concat","toLowerCase","fields","key","label","type","value","adminOnlyEdit","copyable","push","specialButton","hasCheckboxes","console","log","Set","map","t","size","categoryStats"],"sources":["D:/CODE/covalen-app/src/data/massiveTestData.js"],"sourcesContent":["// DonnÃ©es de test avec BEAUCOUP de tÃ¢ches pour stress-test le layout grille 4 colonnes\nexport const massiveTestAppData = {\n    Maison: {}, // L'onglet Maison n'aura pas de tÃ¢ches directement\n    Adjointes: []\n};\n\n// Fonction pour gÃ©nÃ©rer des tÃ¢ches alÃ©atoirement\nconst generateRandomTasks = () => {\n    const categories = [\n        'Annulations',\n        'RÃ©clamations',\n        'Validations',\n        'Correspondances',\n        'Expertises',\n        'Sinistres',\n        'Contrats',\n        'Clients',\n        'Facturations',\n        'Juridique',\n        'Techniques',\n        'Archives'\n    ];\n\n    const taskPrefixes = [\n        'Traitement', 'Validation', 'VÃ©rification', 'ContrÃ´le', 'Analyse',\n        'Suivi', 'Gestion', 'RÃ©vision', 'Expertise', 'Inspection',\n        'Ã‰valuation', 'Approbation', 'Archivage', 'Transmission', 'Notification'\n    ];\n\n    const taskSuffixes = [\n        'urgent', 'standard', 'prioritaire', 'diffÃ©rÃ©', 'spÃ©cial',\n        'mensuel', 'hebdomadaire', 'quotidien', 'annuel', 'trimestriel',\n        'automatique', 'manuel', 'numÃ©rique', 'papier', 'Ã©lectronique'\n    ];\n\n    const tasks = [];\n    let taskId = 1;\n\n    // GÃ©nÃ©rer 15-25 tÃ¢ches par catÃ©gorie (total: ~240 tÃ¢ches)\n    categories.forEach(category => {\n        const tasksInCategory = Math.floor(Math.random() * 11) + 15; // 15-25 tÃ¢ches\n\n        for (let i = 0; i < tasksInCategory; i++) {\n            const prefix = taskPrefixes[Math.floor(Math.random() * taskPrefixes.length)];\n            const suffix = taskSuffixes[Math.floor(Math.random() * taskSuffixes.length)];\n            const modelNumber = Math.floor(Math.random() * 900) + 100; // 100-999\n\n            const task = {\n                id: taskId.toString(),\n                name: `${prefix} ${suffix} ${category.toLowerCase()}`,\n                category: category,\n                fields: [\n                    {\n                        key: 'modelNumber',\n                        label: 'NumÃ©ro de ModÃ¨le/Lettre',\n                        type: 'text',\n                        value: modelNumber.toString(),\n                        adminOnlyEdit: true\n                    },\n                    {\n                        key: 'fullTemplateName',\n                        label: 'ModÃ¨le de lettre',\n                        type: 'text',\n                        value: `${prefix} ${suffix} - ModÃ¨le ${modelNumber}`,\n                        adminOnlyEdit: true,\n                        copyable: true\n                    },\n                    {\n                        key: 'attachmentName',\n                        label: 'Nom de PiÃ¨ce Jointe',\n                        type: 'text',\n                        value: `2025-06-26 ${category} - ${prefix} ${modelNumber}`,\n                        adminOnlyEdit: false,\n                        copyable: true\n                    }\n                ]\n            };\n\n            // Ajouter des champs supplÃ©mentaires alÃ©atoirement\n            if (Math.random() > 0.5) {\n                task.fields.push({\n                    key: 'noteTemplate',\n                    label: 'Note EPIC',\n                    type: 'textarea',\n                    value: `${category} - ${prefix} ${modelNumber} + documentation`,\n                    adminOnlyEdit: false,\n                    copyable: true,\n                    specialButton: 'addDate'\n                });\n            }\n\n            if (Math.random() > 0.7) {\n                task.fields.push({\n                    key: 'procedure',\n                    label: 'ProcÃ©dure Ã  Suivre',\n                    type: 'textarea',\n                    value: `1. Analyser le dossier ${category.toLowerCase()}.\\\\n2. Appliquer la procÃ©dure ${modelNumber}.\\\\n3. Archiver le rÃ©sultat.`,\n                    adminOnlyEdit: true,\n                    hasCheckboxes: Math.random() > 0.5\n                });\n            }\n\n            tasks.push(task);\n            taskId++;\n        }\n    });\n\n    return tasks;\n};\n\n// GÃ©nÃ©rer les tÃ¢ches\nmassiveTestAppData.Adjointes = generateRandomTasks();\n\nconsole.log(`ðŸ§ª DonnÃ©es de test gÃ©nÃ©rÃ©es: ${massiveTestAppData.Adjointes.length} tÃ¢ches rÃ©parties sur ${new Set(massiveTestAppData.Adjointes.map(t => t.category)).size} catÃ©gories`);\n\n// Stats par catÃ©gorie\nconst categoryStats = {};\nmassiveTestAppData.Adjointes.forEach(task => {\n    categoryStats[task.category] = (categoryStats[task.category] || 0) + 1;\n});\n\nconsole.log('ðŸ“Š RÃ©partition par catÃ©gorie:', categoryStats);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}